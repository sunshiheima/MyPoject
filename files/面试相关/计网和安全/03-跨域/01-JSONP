
【JSON】 —— 一种轻量级的数据交换格式

---------------------------------------------------------------------------------------------------------

-即便两个不同的域名指向同一个ip地址，也非同源
-<script><img><iframe>标签，不受同源策略限制
-JSONP只支持GET请求，而不支持POST请求等其他类型的HTTP请求

JSONP原理：
-客户端在http请求的url当中带上一个回调函数名，即?callback=xxx
-服务端接收到请求后，会返回一段js代码，在这段代码中会调用此约定好的回调函数名，并且将数据作为参数传递
-当网页接收到这段js代码后执行，回调函数被调用，客户端成功获取数据

//浏览器
<script>
    function demo(data){
        console.log(data);      //data就为服务端传过来的JSON数据
    }
</script>
<script url="http://www.yf.com/xxx?callback=demo"></script>
//服务端
var JSON = {
    username: "yf",
    age: 21
}
ctx.response = `demo(JSON)` //字符串形式的js代码？

----------------------------------------------------------------------------------------------------------

【JSONP】—— JSON with padding (将json数据填充进回调函数)

1.JSONP工作原理
<script>标签的src属性并不被同源策略所约束，所以可以获取任何服务器上脚本并执行它

2.JSONP的回调实现
创建一个script标签，将其url设置为目标服务器。再创建一个回调函数，在url当中加入参数callback=该回调函数名称；
然后在远程服务器上调用这个函数，并且将JSON数据形式作为参数传递，完成回调。
（将json数据填充进回调函数，这就是为什么叫JSONP-JSON with padding）

代码：
//客户端
<script type="text/javascript">
  function cb(res) {
    console.log(res)
  }
  
  function addScriptTag(src){
    let script = document.createElement('script')
    script.setAttribute("type","text/javascript")
    script.src = src
    document.body.appendChild(script)
  }

  window.onload = function(){
    addScriptTag("https://jsonplaceholder.typicode.com/todos?callback=cb")
  }
</script>
//服务端
var b = "我是b"
cb({    // 调用cb函数，并以json数据形式作为参数传递
  code:200, 
  msg:"success",
  data:{
    b: b
  }
})

-----------------------------------------------------------------------------------

【JSONP和AJAX】对比

//原理上
两者都是请求url，然后把服务器返回的数据进行处理。(一般类JQ库只是把JSONP作为AJAX请求的一种形式进行封装)
-AJAX的核心是通过XmlHttpRequest获取非本页内容
-JSONP的核心是动态添加script标签调用服务器提供的JS脚本（后缀 .json）

//使用上
-AJAX不同域会报跨域错误，不过也可以通过服务端代理、CORS 等方式跨域
-而JSONP没有这个限制，同域不同域都可以
-AJAX不一定非要用json格式来传递数据
-JSONP指支持GET请求，AJAX支持GET和POST请求



