【DNS查询】（以www.example.com为例）
1.检查浏览器缓存
2.检查操作系统缓存，如hosts文件中有无对应的映射
3.检查路由器缓存
4.检查ISP(网络服务提供商)的本地DNS服务器查询
5.如果本地DNS服务器没找到，会将请求转发给根域名服务器，进行迭代查找
-向根域名服务器(Root Server)发送请求，会返回顶级域名服务器(TLD)如.com、.cn、.org等的地址，全球只有13台，本例中会返回.com的地址；
-向顶级域名服务器(TLD)发送请求，会返回次级域名服务器(SLD)的地址，本例会返回.example的地址
-向次级域名服务器(SLD)发送请求，查询到目标IP（即域名www.example.com对应的ip地址）
-本地DNS服务器会缓存结果至系统中，并将ip地址返回给用户。

【DNS安全问题】
1.DNS反射/放大攻击：向大量开放DNS服务器发送大范围域名查询的DNS请求，消耗DNS服务器资源使其无法及时响应正常的DNS解析请求。
2.DDOS攻击：可能造成域名解析瘫痪
3.DNS/域名劫持：劫持并修改DNS的解析结果
4.DNS污染：国内的服务器(非DNS)监控到用户正在访问一个被标记地址时，服务器伪装成DNS服务器向用户发回错误的地址。（该域名解析请求不会成功到达DNS服务器）
5.DNS信息被黑客修改

【DNS优化】
1.DNS Prefetch
用户在请求某个链接之前，浏览器先尝试解析该链接的域名，并将其(域名向ip地址的映射)缓存下来。这样真正请求时就不需要进行DNS解析了。
-在服务器中响应头中启动预解析：X-DNS-Prefetch-Control为on
-在HTML中：<meta http-equiv="x-dns-prefetch-control" content="on">
-对特定域名预解析：<link rel="dns-prefetch" href="//fonts.googleapis.con">
2.域名收敛
将静态资源尽量只放在一个域名下面，减少DNS请求
3.httpdns
【基于HTTP协议向HTTPDNS服务器】发送域名解析请求  ==替代==>  【基于DNS协议向运营商本地NDS服务器】发送域名解析请求
可以避免运营商的域名劫持。
-客户端直接访问HTTPDNS接口，获取业务在域名配置管理系统上配置的访问延迟最优的IP
-客户端向此ip发送请求（需在header中指定host字段？）




