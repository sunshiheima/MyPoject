Service-Worker:（必须是https协议）
是独立于主线程之外的Javascript线程，脱离于浏览器窗体，因此无法直接访问DOM。
可以帮我们实现【离线缓存】、【消息推送】、【网络代理】等功能

--------------------------------------------

Service-Worker如何实现离线缓存？
//简介
Service Worker 的生命周期包括 install、active、working 三个阶段。
一旦 Service Worker 被 install，它将始终存在，只会在 active 与 working 之间切换，除非我们主动终止它。
//具体实现
-Service会在install之后被初始化，指定需要缓存的文件名(cache.addAll([...]))
-Service Worker会监听所有的网络请求，网络请求的产生触发的是fetch事件
-在fetch事件对应的监听函数中拦截请求，先判断caches当中是否有该请求对应的缓存。有则直接返回给浏览器；否则发送真正的AJAX请求，并将请求结果存入caches当中

const version = "2";
self.addEventListener("install", event => {
    event.waitUntil(
        caches.open(`static-${version}`)
        .then(cache => cache.addAll([
            //'/styles.css',        //因为install阶段的资源内容也是从HTTP缓存中得到的，所以也可能有版本不一致的问题
            //'/script.js'
            new Request('/styles.css', { cache: 'no-cache' }),      //强制让SW中的请求必须向服务端验证  //并非所有浏览器都支持cache选项的配置，可以给url添加随机数使得每次请求的URL都不相同
            new Request('/script.js', { cache: 'no-cache' })        
        ]))
    )
})
self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => response || fetch(event.request))
  );
});

------------------------------------------------

实现离线缓存之前，我们需要知道站点中有多少静态资源、设定版本号的生成规则、再具体编写我们的SW脚本。
这些是可以自动化的，sw-precache可以帮我们完成这些工作。尤其在构建阶段配合Gulp或Grunt使用：（官网中也有示例）

下面这段脚本:
-注册了一个名为generate-service-worker的任务，用于在根目录生成一个名为service-worker.js的sw脚本
-这个脚本缓存的资源，则是目录下的所有脚本、样式、图片、字体等几乎所有的静态文件。

gulp.task('generate-service-worker', function(callback) {
  var swPrecache = require('sw-precache');
  var rootDir = 'app';

  swPrecache.write(`${rootDir}/service-worker.js`, {
    staticFileGlobs: [rootDir + '/**/*.{js,html,css,png,jpg,gif,svg,eot,ttf,woff}'],
    stripPrefix: rootDir
  }, callback);
});

