路由：

---------------------------------------------路由的由来：要从单页应用说起--------------------------------------------------
单页应用(SPA)的特点是：
   一个Web项目只有一个HTML页面，一旦页面加载完成，SPA不会像传统方式一样因为用户的操作而进行页面的重新加载或跳转。
  取而代之的是利用JS动态变换HTML的内容，从而【模拟】多个视图间切换。

由于SPA中用户的交互是通过JS改变HTML内容来实现的，页面本身的url并没有变化，这导致了两个问题：
  -SPA无法记住用户的操作记录，无论是刷新、前进还是后退，都无法展示用户真实的期望内容
  -SPA虽然看起来有多个页面，但实则只有一个url，对SEO不友好，不方便搜素引擎进行收录。

而【前端路由】，就是为了解决上述问题而出现的！！！

------------------------------------------------------路由--------------------------------------------------------------------
路由：即保证只有一个HTML页面，且与用户交互时不刷新和跳转页面的同时，为SPA中的每个视图展示匹配一个特殊的url。当刷新、前进、后退和SEO时均通过这个特殊的url来实现。
为了实现这个目标，需要做到以下两点：
-改变url且不让浏览器向服务器发送请求
-可以监听到url的变化 
而路由的两种模式--【hash模式&&history模式，就是实现了上面的功能】

----------------------------------------------路由的hash模式和history模式--------------------------------------------------------
1)两种模式解决的都是以下两个问题
-改变url且不让浏览器向服务器发送请求
-可以监听到url的变化

2)hash实现
-hash是URL中hash(#)及后面的那部分，常用作锚点在页面内进行导航，改变URL中的hash部分不会引起页面刷新
 //改变URL的方式只有这三种：通过浏览器前进后退改变URL/点击<a>标签跳转至另一个URL/通过window.location改变URL(JS代码控制)
-通过hashchange事件监听URL的变化
 //这几种情况改变URL都会触发hashchange事件

3)history实现
-history提供了pushState和replaceState两个方法，这两个方法改变URL的path部分不会引起页面刷新
 //改变URL的方式新增了两种：通过pushState()/replaceState()，来向历史记录(history对象)中添加或替换URL；使用JS调用history.back()/forward()/go()时，
-通过popstate事件监听URL的变化。它和hashchange事件的区别：
 -浏览器前进后退改变URL/用JS调用history.back()等方法时，会触发popstate事件
 -而通过调用pushState()等方法/<a>标签改变URL时，不会触发popstate事件
  //但是可以通过拦截pushState/replaceState的调用和<a>标签的点击事件来检测URL变化（所有监听URL变化可以实现，只是没有hashchange那么方便）

两者的区别最明显的就是：hash模式的url带有#号，而history模式则没有

2) 两种模式的使用注意：
如果使用history模式，也就是BrowserRouter组件，在访问二级页面的时候，做刷新操作，会出现404错误，这个问题我们在"修井专家项目"当中也遇到了。原因如下：
因为我们在单页应用当中访问二级页面时看到的url，其实是一个假的url，是服务器无法识别的url.
所以，如果要应用history模式，那么就需要和后端人员配合让他配置一个apache或者nginx的url重定向，重定向到首页路由上

再就是我之前尝试过将前台代码build，发现：
hash模式下，build之后本地index.html打开正常
history模式下，build之后本地index.html打开是无效的

在博客上有看到，在开发App的时候，需要把页面分享给第三方App，有的App里面url是不允许带有#号的，所以就必须使用history模式。
//相同的hash值不会触发动作将记录加入到历史栈中，而history的pushState则可以。

---------------------------------------------------路由在项目中使用-------------------------------------------------------------------
React当中有两个包可以实现路由: react-router和react-router-dom。(react-router-dom是在react-router上的增强！其依赖包当中就有react-router)

综述：
React Router中有三类组件：
-router组件：BrowserRouter, HashRouter, Router
-route matching组件：Route, Switch
-navigation组件：Link、NavLink、Redirect
//其他：WithRouter、history对象

----------------router组件-------------------

1.HashRouter和BrowserRouter
通常放在App.js当中作为最外层的包裹
另外要注意：
1)在App.js当中使用Provider组件也是应该将其放在最外层。如果两者都有，那么应该将Provider组件放在最外层，Router放在第二层。
//2)两者其实就是路由的两种模式--hash模式和history模式的实现~两种Router的区别就是这两种模式的区别

2.Router组件
低级路由，适用于任何路由组件，主要和redux深度集成，使用必须配合history对象
【使用Router路由的目的是：和状态管理库如redux中的history同步对接】
<Router history={history}>
    ...
</Router>

-------------route matching组件------------

1)Route组件
Route的参数：
-path       跳转的路径
-component  对应路径显示的组件
-exact      匹配规则，true的时候则精确匹配
path        url      exact值       匹配结果
/a         /a/b       false         yes
/a         /a/b       true          no

2)Switch组件（路由切换，只会匹配到符合条件的第一个路由，可以想象成tab栏）
Switch内部只能包含Route、Redirect、Router
<Switch>
    <Route exact path="/" component={Home} />
    <Route path="/about" component={About} />
    <Route path="/:user" component={User} />
    <Route component={NoMatch} />
</Switch>

------------navigation组件-----------------

1)Link组件
//Link的可选属性：to/replace/innerRef
属性to:表示跳转到哪个路径，其值有两种写法
//字符串写法
<Link to="/a/" />
//对象写法
<Link to={{
  pathname: 'courses',
  search: '?sort=name',
  hash: '#the-hash',
  state: {formDashboard: true}     //这是可以跳转时传参的节奏？
}}/>

2)NavLink
比Link多了一些可选的属性，是Link的拓展

3)Redirect组件（重定向）
属性to:表示跳转到哪个路径，其值有两种写法
//基本的重定向
<Redirect to="/somewhere/else" />
//对象形式
<Redirect
  to={{
      pathname: "/login",
      search: "?utm=your+face",
      state: {referer: currentLocation}
  }}
/>
//采用push生成新的记录
<Redirect push to="/somewhere/else" />
//配合Switch组件使用，from表示重定向之前的路径，如果匹配则重定向，不匹配则不重定向
<Switch>
  <Redirect from="/old-path" to="/new-path" />
  <Route path="/new-path" component={Place} />
</Switch>

-----------------其他----------------------

history对象：
提供了api使我们可以通过代码来控制前进后退和刷新呢？
如果是路由组件我们可以直接使用this.props.history获取到history对象；如果只是普通组件，我们可以使用withRouter包裹组件获取。
在history中封装了push, replace, go等方法，就可以实现【前进后退等操作】啦！
























参考文章：https://juejin.im/post/5d2d41a7e51d454f723025ad#heading-30

---------------------------------------------------------

--------1-------

1.router组件（即路由的hash模式和history模式）
1)HashRouter组件和BrowserRouter组件：
其实就是路由的hash和history模式，使用时这两个组件是路由的容器用法：
ReactDOM.render(
    <BrowserRouter>     //或者换成HashRouter
        <Route path="/" component={Home} />
    </BrowserRouter>
)

2)Router组件
低级路由，适用于任何路由组件，主要和redux深度集成，使用必须配合history对象【
【使用Router路由的目的是：和状态管理库如redux中的history同步对接】
<Router history={history}>
    ...
</Router>

--------2-----

2.route matching组件（即路由匹配）
1)Route组件
Route的参数：
-path       跳转的路径
-component  对应路径显示的组件
-exact      匹配规则，true的时候则精确匹配
path        url     是否开启       匹配结果
/a         /a/b       false         yes
/a         /a/b       true          no
-render     可以自己写render函数返回具体的dom，而不需要去设置component
-location
-sensitive
-strict

2)Switch组件（路由切换，只会匹配第一个路由，可以想象成tab栏）
Switch内部只能包含Route、Redirect、Router
<Switch>
    <Route exact path="/" component={Home} />
    <Route path="/about" component={About} />
    <Route path="/:user" component={User} />
    <Route component={NoMatch} />
</Switch>

--------3------

3.navigation组件（即跳转路由）
1)Link组件
Link的可选属性：to/replace/innerRef
属性to:表示跳转到哪个路由，其值有两种写法
//字符串写法
<Link to="/a/" />
//对象写法
<Link to={{
  pathname: 'courses',
  search: '?sort=name',
  hash: '#the-hash',
  state: {formDashboard: true}     //这是可以跳转时传参的节奏？
}}/>

2)NavLink组件
NavLink的可选属性：Link的所有可选属性/activeClassName/activeStyle/exact/strict/isActive/location
<NavLink to='/a/123' />

3)Redirect组件（重定向）
//基本的重定向
<Redirect to="/somewhere/else" />
//对象形式
<Redirect
  to={{
      pathname: "/login",
      search: "?utm=your+face",
      state: {referer: currentLocation}
  }}
/>
//采用push生成新的记录
<Redirect push to="/somewhere/else" />
//配合Switch组件使用，from表示重定向之前的路径，如果匹配则重定向，不匹配则不重定向
<Switch>
  <Redirect from="/old-path" to="/new-path" />
  <Route path="/new-path" component={Place} />
</Switch>

------------------

4.其他
1)WithRouter
当一个非路由组件也想访问到当前路由的match,location,history对象，那么withRouter将是一个非常好的选择。（可以理解为将一个组件包裹成路由组件）
import {witchRouter} from 'react-router-dom';
const MyComponent = (props) => {
    const {match, location, history} = this.props;
    return (
        <div>{props.location.pathname}</div>
    )
}
const FirstTest = withRouter(MyComponent);

2)history对象
react-router怎么使用api来控制前进后端和刷新呢？这就需要history对象的作用了！
其实在每个路由组件上我们可以使用this.props.history获取到history对象，也可以使用withRouter包裹组件获取。
在history中封装了push, replace, go等方法，这样就可以调用history中的方法来实现【前进后退等操作】啦！
History {
    push(path: Path, state?: LocationState);   //调用push前进到一个地址，可以接受一个state对象，就是自定义的路由数据
    replace(path: Path, state?: LocationState); //用页面替换当前的路径，不可再goBack
    go(n: number);  //往前走多少个页面
    goBack();       //返回一个页面
    goForward();    //前进一个页面
    //还有很多，具体见文章
}
//其次还可以通过暗转history库来实现，具体用法见文章
<BrowserRouter history={history} ... />

3)路由鉴权，作者没写！

















