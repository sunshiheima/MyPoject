1.数据
vue：使用的是可变数据。通过getter/setter以及一些函数的劫持，来精准的监听数据变化，不需要特别优化就能达到很好的性能
react：使用的是不可变数据。默认是通过比较引用的方式进行，如果不优化(PureComponent/shouldComponentUpdate)可能导致大量不必要的Virtual DOM的重新渲染

2.数据流
vue: 父子之间使用props进行单向传递(EventEmiter)，组件和DOM之间使用v-model双向绑定
react: 父子之间使用props，组件和DOM之间使用state，都是单向的

3.组件复用
vue：vue中组件是一个被包装的函数，通过mixin来组合不同功能
react：React组件是一个纯粹的函数，通过HOC(高阶组件)来组合不同功能

4.组件通信
vue: 父组件向子组传递数据-使用props；子组件向父组件传递数据-使用事件机制
     //跨层：v2中新增的provide/inject
react: 父祖家你向子组件传递数据-使用props；子组件向父组件传递数据-子组件调用父组件传递过来的函数
     //跨层：context

5.模板渲染引擎
vue：拓展的HTML语法
react：jsx渲染模板（但实际上react并不依赖jsx），写法上更贴近原生

6.vuex和redux
vuex：将store直接注入到了组件实例中，使用较灵活（使用dispatch和commit提交更新；通过mapState/this.store来读取数据）
      使用可变数据，直接对数据做修改
redux：每一个组件都需要使用connect把需要的props和dispatch连接起来（数据修改只能通过dispatch一个action，而不能直接调用reducer进行修改）
      使用不可变数据，每次使用







