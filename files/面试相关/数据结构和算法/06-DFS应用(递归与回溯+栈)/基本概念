回溯算法的基本思想是：从一条路往前走，能进则进，不能进则退回来，换一条路再试
从以上思想描述当中，就能感觉到回溯当中需要做重复的事情，因此回溯思想的实现还需要递归！

回溯是一种思想，而递归是解决回溯问题的一种方式，也可以用“非递归”的方式来解决回溯问题的！
而遍历算法(DFS和BFS)中的DFS算法的核心思想就是回溯思想，这里的“回溯”二字可以理解为是在强调DFS过程中"退一步重新选择"这个动作。因此DFS算法其实就是回溯思想的体现！
迷宫、二叉树的遍历、全排列等等都是DFS的应用，即回溯思想的应用！

因此DFS和递归回溯是分不开的！不用纠结这些概念问题了，会解决问题才是王道！

如何总结出一套解题模板：
1.什么时候用？（明确场景）
  -题目中暗示了一个或多个解，并且要求我们详尽的列举出每一个解的内容(即穷举)，一定要想要DFS（即递归回溯）
   注意区分：如果不问解的内容，只问解的个数。这类问题往往不用DFS(即递归回溯)来解，而是用动态规划！！！
  -题目经分析之后，可以转化为树形逻辑模型来求解
2.为什么这样用？（提供依据）
  -因为题目要求我们列举每一个解的内容，而递归和回溯的过程本身就是一个穷举的过程。
  -解从哪儿来？—— 解是基于穷举思想、对搜索树进行恰当的剪枝后得来的
3.怎么用？（细化步骤）
  -一个模型：树形逻辑模型；两个要点：递归式和递归边界
   树形逻辑模型的构建，关键在于找“坑位”，一个坑位就对应于树中的一层，每一层的处理逻辑往往是一样的。
   递归式的内容：即上面的逻辑
   递归边界：要么在题目中约束的非常清楚，要么默认为“坑位”数量的边界

解题模板伪代码：
function xxx(入参){
  前期的变量定义、缓存等准备工作

  //定义路径栈
  const path = [];

  //进入dfs
  dfs(起点)

  //定义dfs
  dfs(递归参数){
    if(到达了递归边界){
      结合题意处理边界逻辑，往往和path内容有关
      return
    }

    //注意这里也可能不是for，视题意决定
    for(遍历坑位的可选值){
      path.push(当前选中值)
      
      处理坑位本身的相关逻辑

      path.pop()
    }

  }
}

















-------------------------------------------------下面仅供了解！！！-----------------------------------------------------

--------------------------------------------------下面为DFS和BFS那篇的笔记-----------------------------------------------
DFS(深度优先搜索)和BFS(广度优先搜索)：这两种算法和栈、队列有着千丝万缕的关系。

DFS(深度优先搜索)的思想 —— 不撞南墙不回头的“迷宫游戏”

如何走通一条路？你只能尝试把每一条能走的路都走一遍 —— 也就是所谓的“穷举法”
1.以当前位置为起点，闷头往前走
2.在前进的过程中，难免会遇到岔路口。这个路口可能分叉出去两条、三条、四条甚至更多的道路。
  你只能选择其中的一条路、然后继续前进（注意，你可能会不止一次遇到岔路口；每遇到一个新的岔路口，你都需要做一次选择）。
3.你选择的这条路未必是一条通路。
  如果你走到最后发现此路不通，那么你就要退回到离你最近的那个分叉路口，然后尝试看其它的岔路能不能走通。
  如果当前的岔路口分叉出去的所有道路都走不通，那么就需要退回到当前岔路口的上一个岔路口，进一步去寻找新的路径。

DFS：只要没有碰壁，就决不选择其他的道路，而是坚持向当前道路的深处挖掘
     像这样将“深度”作为前进的第一要素的方法，就是所谓的“深度优先”

------------------------------------------------------------------------------------------------------------------------

DFS、栈、递归、二叉树的先序遍历：
深度优先搜索的本质 —— 栈结构
走迷宫【前进】和【后退到之前最近的岔路口】的操作，其实和栈结构的入栈、出栈过程非常类似
那么深度优先搜索在编码上会如何实现了？ DFS中，我们往往用【递归】来模拟入栈、出栈的逻辑
回顾“二叉树的先序遍历”正是”深度优先搜索“思想的递归实现；
回顾“二叉树的先序遍历”的递归实现。我们可以发现：【递归式就是我们选择道路的过程，而递归边界就是死胡同】
为什么我们先说【DFS应该用入栈、出栈来实现】，但又说【DFS可以用递归来实现】了？—— 别忘了，其实递归的底层原理也是入栈、出栈呀~~~~
DFS是一种思想，“二叉树的先序遍历”是DFS思想的应用之一



--------------------------------------------------下面为递归回溯思想那篇的笔记---------------------------------------------
全排列问题：
尝试先从不变的东西入手 —— 坑位的数量不变（为3）

我们的思维路径是一个树结构，但这并不意味着我们需要真的在编码时去构造一棵树出来。
回忆一下走迷宫，其各种路径组合起来，是不是也是一个树结构？
走迷宫时我们没有构造树，这里也不需要构造树，需要什么？需要递归！！！！（为什么？？？）

无论是之前的DFS还是现在的这道题，有一个非常关键的特征在提醒你往递归去想 —— 那就是【重复】

这里给大家一个思维工具：
以后只要分析出重复的逻辑（排除掉类似数组遍历这种简单粗暴的重复），你都需要把递归从你的大脑内存里调度出来、将其列为“可以一试”的解法之一；
只要想到递归，立刻回忆我们上一节讲的 DFS 思想、然后尝试套我们这一节末尾教给大家的解题模板。

------------------------------------------------下面为极客时间中的概念---------------------------------------------------------------

递归需要满足的三个条件(即只要同时满足以上三个条件，就可以用递归来解决)
    1) 一个问题的解可以分解为几个子问题(即数据规模更小的问题)的解
    2) 这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样
    3) 存在递归终止条件

如何写出递归代码：
    1) 找到如何将大问题分解成小问题的规律
    2) 并且基于此写出递推公式，然后再推敲出终止条件
    3) 最后将递推公式和终止条件翻译成代码

递归的缺点：
    1) 递归代码要警惕堆栈溢出
       原因：函数调用会使用栈来保存临时变量
            每调用一个函数，都会将临时变量封装成栈帧压入内存栈，等函数执行完返回，才出栈。
            而系统栈或者虚拟机栈空间一般都不大
            如果递归求解的数据规模都很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。
       解决：在代码中限制递归调用的最大深度

    2) 递归代码要警惕重复计算
       解决：为了避免重复计算，我们可以通过一个数据结构（比如散列表）来保存已求解过的f(k)
            当递归调用到f(k)时，先看下是否已经求解过了。如果是，则直接从散列表中取值返回。

    3) 递归代码还有效率上的问题
       当函数调用的数量较大时，就会积聚成一个【可观的时间成本】
       而且就连最简单的递归问题【空间复杂度】也不会是O(1)，而是O(n)

注意：1.递归算法的时间复杂度普遍比较难（需用到归纳法等）
     2. 递归算法的时复很多是不能接受的，如果发现算出的时间复杂度过大，则需转换思路另找解法
        找更好的解法才是根本目的，不要为了递归而递归

------------------------------以下为了解部分---------------------------------------------------

在理论上来讲，所有的递归代码都可以改为迭代循环的非递归代码
原因：
    因为递归本身就是借助栈来实现的，只不过我们使用的栈是系统或者虚拟机本身提供的，我们没有感知罢了
    如果我们自己在内存堆上实现栈，手动模拟入栈、出栈过程，这样任何递归代码都可以改写成看上去不是递归代码的样子










