有关数据结构和算法基础的介绍：
    见纸质笔记

此目录下面记录的主要是常见的数据结构和算法（已分类）
及每一块对应的常见的题目
参考：http://www.conardli.top/docs/dataStructure/#%E9%93%BE%E8%A1%A8

据我理解，数据结构及算法对于我们解决生活中的实际问题的意义是：
    当我们在实际生活当中遇到一个问题，我们应该：
    1.为实际问题选定一个合适的数据的逻辑结构，例如：如果要操作<公司的组织结构>，合适的数据结构是<树>
    2.根据实际问题选定合适的数据的存储方式，例如：此处我们选用对象{...}作为数据的存储结构
    注意：上面：数据的逻辑结构-即决定数据的组织方式，数据的存储方式-即决定数据的存储方式。都是我们根据实际需求来确定的
    3.将这种数据结构（树）的定义及功能（增删查）用代码实现出来，并将所有功能封装在一个函数里面便于将来复用
    4.用这个函数（封装着树的定义及功能）来解决实际问题，例如：往公司插入一个职员，从公司开除一个职员，找到公司的某个职员以呈现其具体信息。

    可以看出来，上面四步中，最难的一步就是第3步，
    但是有前辈已经总结出来了最好的数据结构的代码实现，我现在正在学的也就是这部分。这个不由我们自己选择，只需要借鉴前人代码即可。
    但是，代码实现时究竟用什么数据的存储方式我们可以自己决定，把代码相应的位置替换一下即可。
    例如：我们现在所学的是用对象即{...}来作为存储结构，在某些情况下我们可以会觉得用数组来存储更好，
          那么我们只需要把相应的代码部分改一下即可。一般也就是对象和数组身上的操作方法不一样

示例数据：
let pRoot = {
  data: 7,
  left: {
    data: 4,
    left: {
      data: 2,
      left: {
        data: 1,
        left: undefined,
        right: undefined
      },
      right: {
        data: 3,
        left: undefined,
        right: undefined
      }
    },
    right:{
      data: 6,
      left: {
        data: 5,
        left: undefined,
        right: undefined
      },
      right: undefined
    }
  },
  right:{
    data: 9,
    left: {
      data: 8,
      left: undefined,
      right: undefined
    },
    right: {
      data: 10,
      left: undefined,
      right: {
        data: 11,
        left: undefined,
        right: {
          data: 12,
          left: undefined,
          right: undefined
        },
      }
    }

  }
}


