出自掘金小册【前端算法和数据结构面试】：

1.数组和字符串的角色往往是“算法思想的载体"(比如:排序算法、二分思想、动态规划思想等等)
   而链表本身就可以被认为是"命题的目的"

2.JS中的链表，是以嵌套的对象的形式来实现的
  {
	//数据域
	val: 1,
	//指针域，指向下一个节点
	next: {
		val: 2,
		next: ...
	}
   }

3.实际面试中的命题规律，把这些题目分为以下三类：
  -链表的处理：合并、删除等（删除是重点）
  -链表的反转及其衍生题目
  -链表成环问题及其衍生题目

-----------------------------------------------------------------------
来自极客时间【数据结构与算法】

1.程序局部性原理：
即CPU于内存之间往往集成了很多级的缓存，这些缓存越接近CPU，速度越快。
如果能提前把内存中的数据加载到离CPU较近的缓存之中，那么下一次CPU取数的时候直接从这些缓存里取即可，能让CPU执行速度加快。
-----
那什么情况下内存中的数据会被提前加载到离CPU近的缓存中了？
答案：是当某个元素被用到的时候，这个元素地址附近的元素也会被提前加载到缓存之中。
因此，数组可以利用局部性原理，而链表则不能！

------------------------------------------------------------------------

2.数组和链表的区别：
数组：随机访问的时复为O(1)，而插入删除操作的时复为O(N)--因为需要搬移数据
链表：随机访问的时复为O(N)--因为需要遍历查找（是在内存中的位置不连续所致），而插入删除操作的时复为O(1)

数组和链表的应用区别：
注意：数组和链表的对比，并不能局限于时间复杂度
      而且在实际软件开发中，不能仅仅利用复杂度分析就决定使用哪个数据结构来存储数据。
数组优于链表：数组--简单易用，在实现上是连续的内存空间，可以借助CPU的缓存机制，预读数组中的数据，所以访问效率更高---即著名的局部性原理！！！
             链表--在内存中并不是连续存储，所以对CPU缓存不友好，没办法有效预读。
链表优于数组：数组--大小固定，一经声明就要占用整块连续内存空间，若无足够连续内存空间，则“内存不足”导致无法创建数组
             链表--本身没有大小的限制，天然支持动态扩容，且无需连续内存空间。

-------------------------------------------------------------------------------

3.单向链表和双向链表的区别：
单向链表：只有一个方向，节点只有一个后继节点next指向后面的节点
双向链表：支持两个方向，每个节点有一个后继指针next指向后面的节点，还有一个前驱指针prev指向前面的节点。（也因为多了一个指针，所以比单向链表占用更多空间）


单链表和双向链表的应用区别：
同：查找、删除节点中“值等于某个给定值”的节点 --- 都需要从从头节点开始遍历。找到找到值等于给定值的节点（然后将其删除）。时复为O(N)
异：删除给定指针指向的节点 --- 因为双向链表中的节点已经保存了前驱节点的指针，不需要像单链表那样遍历。因此双向的时复为O(1)，单向的时复为O(N)

---------------------------------下面了解即可----------------------------------------------

4.用链表实现LRU缓存淘汰算法：
    1.如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的节点，并将其从原来的位置删除，然后再插入到链表的头部。
    2.如果此数据没有在缓存列表中，有可以分为两种情况：
      如果此时缓存未满，则将此节点直接插入到链表的头部；
      如果此时缓存已满，则链表尾节点删除，将新的数据节点插入链表的头部。

预告：用散列表实现更优！！！

---------------------------------------------------------------------------------
课后思考：
    用单链表来判断字符串是否是回文串。。。

------------------------------------------------------------------------------------
题目：
解题的时候一定要注意：
    题中的每一个节点，例如：pHead、node等等，不仅仅是一个节点，而是一个多层嵌套的对象。因此可以延申出一个链表。
    如果是头节点pHead的话，那么延申出的就是整条链表；如果不是头节点，那么延申出的就是以 该节点为头、以原链表末尾节点为尾 的子链表


微信文章：一文学会链表解题
    如果说数据结构时算法的基础，那么数组和链表就是数据结构的基础。因为像栈、队列、堆、图等比较复杂的数据结构基本上都可以用数组和链表表示。
    1.什么是链表，链表的优缺点
    2.链表的表示及基本操作
    3.链表常见解题思路---翻转
    4.链表常见解题思路---快慢指针
