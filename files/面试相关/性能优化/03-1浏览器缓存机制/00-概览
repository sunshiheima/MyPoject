浏览器缓存机制分为四个方面:(优先级从高到低)
1.Memory Cache
2.Service Worker Cache（必须是https协议）
3.HTTP Cache
4.Push Cache（HTTP2特性）

-----------------------------------------------------

1.内存缓存(Memory Cache)：
是浏览器最先尝试去命中得一种缓存，响应速度最快，当进程结束后，也就是标签页关闭以后，内存里得数据将不复存在。

哪些文件会被放入内存呢？
资源存放的位置具有一定的随机性 —— 内存是有限的，很多时候需要先考虑即时呈现的内存余量，再根据具体的情况决定分配给内存和磁盘的资源量的比重。
资源存不存内存，浏览器秉承的是“节约原则”：
-Base64格式的图片，几乎永远可以被塞进memory cache，这是浏览器为了节省渲染开销
-体积不大的 JS、CSS 文件，也可能被写入内存；但是体积较大的就不会被写入内存，而是被放入磁盘
-<link rel="prefetch">下载的资源，都会暂存到内存中。

注意：
内存缓存在缓存资源时并不关心返回资源的HTTP缓存头Cache-Control是什么值
同时资源的匹配也并非仅仅是对URL做匹配，还可能会对Content-Type，CORS等其他特征做校验

-----------------------------------------------------

2.Service-Worker:（必须是https协议）
是独立于主线程之外的Javascript线程，脱离于浏览器窗体，因此无法直接访问DOM。
可以帮我们实现【离线缓存】、【消息推送】、【网络代理】等功能

Service-Worker-Cache:
即借助Service-Worker实现的【离线缓存】

Service-Worker如何实现离线缓存？
//简介
Service Worker 的生命周期包括 install、active、working 三个阶段。
一旦 Service Worker 被 install，它将始终存在，只会在 active 与 working 之间切换，除非我们主动终止它。
//具体实现
-Service会在install之后被初始化，指定需要缓存的文件名(cache.addAll([...]))
-Service Worker会监听所有的网络请求，网络请求的产生触发的是fetch事件
-在fetch事件对应的监听函数中拦截请求，先判断caches当中是否有该请求对应的缓存。有则直接返回给浏览器；否则发送真正的AJAX请求，并将请求结果存入caches当中

-----------------------------------------------------

3.HTTP-Cache：见文章

-----------------------------------------------------

4.Push Cache：（HTTP2 在 server push 阶段存在的缓存）
-是缓存的最后一道防线。浏览器只有在 Memory Cache、Service Worker Cache 和 HTTP Cache 均未命中的情况下才会去询问 Push Cache
-是一种存在于会话阶段的缓存，当 session 终止时，缓存也随之释放
-不同的页面只要共享了同一个 HTTP2 连接，那么它们就可以共享同一个 Push Cache


