单例模式
1)定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点。
2)结论：单例模式当中最重要的是惰性单例技术。即在需要的时候才创建对象，并且只创建唯一的一个对象。更奇妙的是，【创建对象】和【管理单例】的职责被分布在两个不同的方法当中，这两个方法组合起来才具有单例模式的威力。
3)使用场景：点击按钮出现模态框(modal)---我们希望当我们单击按钮的时候，才会出现模态框。而这个模态框应该是唯一的，即无论单击多少次按钮，这个模态框都只会被创建一次。
4)使用方式：
//1.通用的惰性单例(最终版本)
var getSingle = function(fn){
    var result;
    return function(){
        return result || (result = fn.apply(this, arguments));
    }
}
//2.业务代码中的使用(以登录框为例，当然下面代码当中并未包含具体的登录模态框的代码）
var createLoginLayer = function(){
    //该函数内部应该写和登录浮窗有关的所有代码,包括HTML/CSS/JS（那不就是一个完整的modal组件嘛？）
    var div = document.createElement('div');
    div.innerHTML = '我是登录浮窗';   //HTML
    div.style.display = 'none';      //CSS
    document.body.appendChild(div);  //JS
    return div;
}
var createSingleLoginLayer = getSingle(createLoginLayer);   //这一句是关键！
document.getElementById('loginBtn').onclick = function(){
    var loginLayer = createSingleLoginLayer();
    loginLayer.style.display = 'block';
}
陈述：至于单例模式的具体使用，以“点击按钮出现模态框”为例吧：
1)我们先实现【用于管理单例的getSingle方法】，然后实现【用于创建模态框的createModal方法】(该方法当中包含模态框的HTML/CSS/JS)
2)然后将createModal函数作为getSingle方法的参数传进去，得到最终的createSingleModal方法
3)在合适的时候（此处就是当点击按钮的时候），调用createSingleModal方法创建模态框。
这样，这个模态框就只会在需要的时候才会被创建，并且是全局唯一的！

