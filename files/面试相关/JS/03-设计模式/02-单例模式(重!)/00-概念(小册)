单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点。

单例模式的原理及其在Vuex中的应用实践，还会附上两道面试真题。
  
1.单例模式的原理
单例模式想要做到的是：不管我们尝试去创建多少次，它都只给你返回第一个所创建的那唯一的一个实例。
//需要具备【判断自己是否已经创建过一个实例】的能力

//方法一：class+静态方法（并将唯一实例作为SingleDog的属性保存起来）
//注：类的静态方法(class) 相当于构造函数自身的方法；类的非静态方法相当于原型上的方法(被该类的所有实例共享)
class SingleDog {
    show() {
        console.log('我是一个单例对象')
    }
    static getInstance() {
        // 判断是否已经new过1个实例
        if (!SingleDog.instance) {
            // 若这个唯一的实例不存在，那么先创建它
            SingleDog.instance = new SingleDog()
        }
        // 如果这个唯一的实例已经存在，则直接返回
        return SingleDog.instance
    }
}
const s1 = SingleDog.getInstance()
const s2 = SingleDog.getInstance()
s1 === s2	//true

//方法二：闭包
SingleDog.getInstance = (function() {
    // 定义自由变量instance，模拟私有变量
    ////外层包一层立即执行函数就是为了这个地方的instance初始化（因为class当中instance是作为SingleDog的属性存在的，不是一个变量所以无需初始化）
    let instance = null
    return function() {
        // 判断自由变量是否为null
        if(!instance) {
            // 如果为null则new出唯一实例
            instance = new SingleDog()
        }
        return instance
    }
})()
const s1 = SingleDog.getInstance()
const s2 = SingleDog.getInstance()
console.log(s1===s2);	//true

2.单例模式的应用
一个Vue实例只能对应一个Store，就是使用了单例模式   
Vuex确保Store唯一性的方法和上面getInstance方法具有相似的逻辑

3.单例模式的面试题
1.实现Storage，使得该对象为单例，基于 localStorage 进行封装。实现方法 setItem(key,value) 和 getItem(key)。
2.实现一个全局唯一的Modal弹框


