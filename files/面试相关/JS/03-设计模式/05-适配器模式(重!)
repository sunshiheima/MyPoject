适配器模式：
    通过【把一个类的接口变换成客户端所期待的另一种接口】，可帮助我们解决不兼容的问题。

适配器模式的应用：
1.兼容接口
新版本的AJAX: 现在我们封装了一个基于fetch的http方法库(见/数据交互/fetch封装.js)
老版本的AJAX: 还有之前封装的基于XMLHttpRequest的库(见/数据交互/XMLHttpRequest封装.js)。
两个库的提供的接口名不同，入参方式也不一样。
要把老代码迁移到新接口，不一定要挨个儿去修改每一次的(Ajax)接口调用，我们只需要在引入(Ajax)接口时进行一次适配即可！

面试作答：
比如以前我们封装了一个Ajax库，是基于XMLHttpRequest的
现在我们封装了一个HttpUtils库，是基于fetch的
我们现在需要把老代码迁移到新接口（使所有网络请求都能够基于fetch），但是原来的Ajax和现在的HttpUtils接收的参数不一致。
那么我们不一定要逐个修改Ajax接口调用，而只需要在引入Ajax接口时进行一次适配即可。(之前的Ajax库已经可以删除，使用这个经过了适配的Ajax即可！)

//老接口名是Ajax，新接口名是HttpUtils。适配器是AjaxAdapter
// Ajax适配器函数，入参与旧接口保持一致
async function AjaxAdapter(type, url, data, success, failed) {
    const type = type.toUpperCase()
    let result
    try {
         // 实际的请求全部由新接口发起
         if(type === 'GET') {
            result = await HttpUtils.get(url) || {}
        } else if(type === 'POST') {
            result = await HttpUtils.post(url, data) || {}
        }
        // 假设请求成功对应的状态码是1
        result.statusCode === 1 && success ? success(result) : failed(result.statusCode)
    } catch(error) {
        // 捕捉网络错误
        if(failed){
            failed(error.statusCode);
        }
    }
}

// 用适配器适配旧的Ajax方法
async function Ajax(type, url, data, success, failed) {
    await AjaxAdapter(type, url, data, success, failed)
}


现在我们只需要调用这个新的AJAX函数（传入和之前一样的参数即可），之前的老版本的AJAX函数(基于XMLHttpRequest封装的)不用管，或者可以删了！

---------------------------------------------------------------------------------------------------

2.axios中的适配器
axios的三个常用api见/数据交互/axios常用api.js
这里重点要聊的是：
-axios本身就用到了适配器模式，它的兼容方案值得我们学习。（可以发现get和post方法的使用方式很像，说明用到了适配器，但书中未对其底层实现进行说明）
-axios可跨平台使用（既不仅可用于浏览器端，还可用于Node环境）—— axios靠适配器完美的【抹平了两种环境下api的调用差异】。（下面重点讲述的就是这个适配器的内部实现）

axios内部派发请求的实则是dispatchRequest方法，该方法内部做了两件事：
-数据层面的适配：既数据转换，转换请求体/响应体
-调用适配器：若用户未手动配置适配器，则使用默认的适配器。
            在默认的适配器中，先判断当前是否是node环境。若是node环境(typeof process不为undefined)，调用node专属的http适配器；若是浏览器环境(XMLHttpRequest对象存在)，则调用基于xhr的适配器。
            两个适配器的入参都是 config；两个适配器的出参都是一个 Promise（且Promise的结构也相似）

好的适配器的自我修养——把变化留给自己，把统一留给用户。
在axios当中，所有关于 http 模块、关于 xhr 的实现细节，全部被 Adapter 封装进了自己复杂的底层逻辑里；
暴露给用户的都是十分简单的统一的东西——统一的接口，统一的入参，统一的出参，统一的规则。











