1.将十进制数字num转换成二进制数字，并将数字转换为字符串。结果为String！
var str = num.toString(2);


2.将其他进制转十进制，并将字符串转换为整数。结果为Number！
parseInt(str, 2);   //将二进制转成十进制
parseInt(str, 8);   //将八进制转成十进制
parseInt(str, 16)   //将十六进制转成十进制


3.让乘法运算a*b的结果为小数，且保留len位小数！结果是Number！
var number = parseFloat(a*b).toFixed(len);


4.ES6遍历对象的6种方法（应用中推荐前三种）
1) for-in循环遍历对象自身的和继承的可枚举属性（不包含Symbol属性）
   var obj = {'0': 'a', '1': 'b', '2': 'c'};
   for(var key in obj){
     console.log(key,": ",obj[key]);
   }
2) 使用Object.keys()遍历
   会返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）
   var obj = {'0': 'a', '1': 'b', '2': 'c'};
   //console.log(Object.keys(obj));   //["0", "1", "2"]
   //console.log(Object.values(obj)); //["a", "b", "c"]
   Object.keys(obj).forEach(function(key){
       console.log(key,": ",obj[key]);
   });

3) Object.getOwnPropertyNames(obj)
   会返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）
   var obj = {'0': 'a', '1': 'b', '2': 'c'};
   Object.getOwnPropertyNames(obj).forEach(function(key){
       console.log(key,": ",obj[key]);
   });

4) 使用Reflect.ownKeys(obj)遍历
   会返回一个数组，包含对象自身的所有属性，不管属性名是Symbol或字符串，也不管是否可枚举
   var obj = {'0': 'a', '1': 'b', '2': 'c'};
   Reflect.ownKeys(obj).forEach(function(key){
       console.log(key,": ",obj[key]);
   });


5.JavaScript遍历数组的3种方法
1) 使用forEach遍历
   var arr = [1,2,3,4];
   arr.forEach(function(val, index){
       console.log(val,": ",index);
   });

2) 使用for-in遍历
   var arr = ["张三", "李四", "王五", "赵六"];
   for(var index in arr){
       console.log(index,": ",arr[index]);
   }

3) 使用for-of遍历
   不仅支持数组，还支持大多数类数组对象，例如DOM NodeList对象
   也支持字符串遍历，它将字符串视为一系列的Unicode字符来进行遍历
   var arr = ["张三", "李四", "王五", "赵六"];
   for(var value of arr){
       console.log(value);
   }



注意去学parseInt和parseFloat的用法！