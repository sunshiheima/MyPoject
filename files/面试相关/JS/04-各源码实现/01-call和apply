/*
bind和call/apply：本质都是改变this的指向
不同点是：bind是返回一个新的函数，而call/apply是直接调用函数（call跟apply就只有参数上的不同）

bind实现注意：
  函数作为构造函数用new关键字调用时，不应该改变其this指向，因为【new绑定】的优先级高于【显式绑定】和【硬绑定】
  从bind源码中可以发现，bind实则是用call实现的
call实现注意：
  调用时：func1.call(obj, 1, 2, 3)，所以如果call只是一个普通方法，call内部的this原本是指向fun1的
  现在我们的目的是将fun1内部的this指向obj
  1.obj = {
    xxx: xxx,
    func1: ...
  }
  2.通过obj.func1()的形式来调用fun1，func1内部的this就指向obj了
apply： 
  同call
*/

//func1.mycall(obj, 1, 2, 3) 原本mycall内的this是指向func1的，现在目标是将func1内部的this指向obj
Function.prototype.mycall = function (thisArg) {
  //this为func1
  if (typeof this !== "function") {
    throw TypeError("mycall must be called on Function");
  }
  //取得参数
  let args = Array.prototype.slice.call(arguments, 1);
  //let args = [...arguments].slice(1);
  //令obj[fn] = func1
  thisArg = thisArg || window;
  let fn = Symbol("fn");
  thisArg[fn] = this;
  //通过obj调用方法
  let result = thisArg[fn](...args);
  delete thisArg[fn];
  return result;
};

//检测
const func1 = function () {
  console.log(this.name, arguments);
};
let obj = {
  name: "obj",
};
func1.mycall(obj, 1, 2, 3);	//已通过检测，结果是obj arguments[1,2,3]  //因为内部实则是let result = obj.func1(1,2,3
//注意：let result = func1.mycall(obj, 1,2,3);  //此处result应该为func1函数中return的值，我们不指定则默认返回undefined

----------------apply--------------------

//func1.apply(obj, [1,2,3]) 原本myapply内部的this指向func1，目标是将func1内部的this指向obj(即obj.func1())
Function.prototype.myapply = function (thisArg) {
  //this为func1
  if (typeof this !== "function") {
    throw TypeError("myapply must be called on Function");
  }
  //取得其他参数
  let args = arguments[1];
  //令obj[fn] = func1
  thisArg = thisArg || window;
  let fn = Symbol("fn");
  thisArg[fn] = this;
  //通过obj来调用该方法，得到结果，删除方法，返回结果
  let result = thisArg[fn](...args);
  delete thisArg[fn];
  return result;
};

//检测
const func1 = function () {
  console.log(this.name, arguments);
};
let obj = {
  name: "obj",
};
func1.myapply(obj, [1, 2, 3]); //已通过，结果为obj arguments[1,2,3]   //因为let result = obj.func1(1,2,3);
//注意：let result = func1.myapply(obj, 1,2,3);  //此处result应该为func1函数中return的值，我们不指定则默认返回undefined


