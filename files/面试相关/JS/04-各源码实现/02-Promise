循序渐进的实现了promise、async/await、generator
https://juejin.im/post/5e3b9ae26fb9a07ca714a5cc

//文章看到【值穿透 & 状态已变更的情况】 

Promise的执行流程：
1.Promise的构造函数接收一个executor，当new Promise()时立即执行该executor
2.executor内部的异步任务加入到宏/微任务队列，等待执行
3.then方法被执行，收集成功/失败回调，加入到成功/失败队列
4.executor的异步任务被执行，触发resolve/reject，从成功/失败队列中取出回调并执行

观察者模式：收集依赖 -> 触发通知 -> 执行依赖
在Promise中：then收集依赖 -> 触发resolve/reject函数 -> resolve执行依赖

代码：
class MyPromise {
  constructor(executor) {
    this._resolveQueue = [];
    this._rejectQueue = [];
    let _resolve = (val) => {
      if (this._resolveQueue.length) {
        const callback = this._resolveQueue.shift();
        callback(val);
      }
    };
    let _reject = (val) => {
      if (this._rejectQueue.length) {
        const callback = this._rejectQueue.shift();
        callback(val);
      }
    };
    executor(_resolve, _reject);
  }
  then = (resolveFn, rejectFn) => {
    this._resolveQueue.push(resolveFn);
    this._rejectQueue.push(rejectFn);
  };
}
//测试
const p1 = new MyPromise((resolve, reject) => {
  setTimeout(() => {
    resolve("result");
  }, 1000);
});
p1.then((res) => console.log(res)); //已测试，一秒后输出"result"


