1.defineProperty版本
-为输入框input的keyup事件，添加一个事件处理函数：每当keyup事件触发时，将输入框当中的值赋给data.text
-为data.text添加一个数据劫持，每当data的text属性被改变时，就会触发其中的set()方法，并自动将新值传给该方法
-在set方法中，会将新值赋给input输入框和span内容，所以实现了双向绑定。
//重点在于第二步，Object.defineProperty接收的set方法，在每次data.text改变时都会被调用

// 数据
const data = {
  text: 'default'
};
const input = document.getElementById('input');
const span = document.getElementById('span');
// 数据劫持
Object.defineProperty(data, 'text', {
  // 数据变化 --> 修改视图
  set(newVal) {
    input.value = newVal;
    span.innerHTML = newVal;
  }
});
// 视图更改 --> 数据变化
input.addEventListener('keyup', function(e) {
  data.text = e.target.value;
});

------------------------------------------------------------
2.proxy版本
原理和Object.defineProperty()差不多
具体的需要了解proxy才能知道

// 数据
const data = {
  text: 'default'
};
const input = document.getElementById('input');
const span = document.getElementById('span');
// 数据劫持
const handler = {
  set(target, key, value) {
    target[key] = value;    //？？？
    // 数据变化 --> 修改视图
    input.value = value;
    span.innerHTML = value;
    return value;
  }
};
const proxy = new Proxy(data, handler);

// 视图更改 --> 数据变化
input.addEventListener('keyup', function(e) {
  proxy.text = e.target.value;
});
