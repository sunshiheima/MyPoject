ECMAScript的类型分为语言类型和规范类型
1.语言类型：即我们常说的undefined, null, boolean, string, number, object
2.规范类型：它们的作用是用来描述语言底层行为逻辑的。
           我们本节重点讲的便是其中的Reference类型，它与this的指向有着密切的关联。


Reference类型
    Reference类型就是用来解释诸如delete、typeof以及赋值等操作行为的。

Reference的构成：
    1.base value：即属性所在的对象
    2.referenced name：属性的名称
    3.strict reference
    -------
    例如：var foo = 1;对应的reference就是：
    var fooReference = {
        base: EnvironmentRecord,
        name: 'foo',
        strict: false
    };
    -------
    而且规范中还提供了获取Reference组成部分的方法，比如GetBase和IsPropertyReference
    1.GetBase：返回reference的base value,
    2.IsPropertyReference：如果base value是一个对象，就返回true
    3.！GetValue：返回对象属性真正的值（注意：调用GetValue，返回的将是具体的值，而不再是一个Reference）

如何确定this的值：
    当函数调用的时候，如何确定this的值？
    。。。。没啥好看的。。。。直接记住结果即可。。。。

------------------------记住以下结果即可！---------------------------------------

var value = 1;

var foo = {
  value: 2,
  bar: function () {
    return this.value;
  }
}

//示例1
console.log(foo.bar()); // 2
//示例2
console.log((foo.bar)()); // 2
//示例3
console.log((foo.bar = foo.bar)()); // 1
//示例4
console.log((false || foo.bar)()); // 1
//示例5
console.log((foo.bar, foo.bar)()); // 1

function foo() {
    console.log(this)
}
foo();  //undefined

