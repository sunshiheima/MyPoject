2345总结：捋一捋！
1.checkscope函数被创建，保存作用域链到内部属性[[scope]]
    checkscope.[[scope]] = [
        globalContext.VO
    ];

2.执行到checkscope函数时（即语句checkscope()这一句？），并不立刻执行函数内部代码，而是先做准备工作 —— 创建checkscope函数执行上下文，并将其压入执行上下文栈中
    stack = [
        checkscopeContext,
        globalContext
    ]
3.checkscope函数执行上下文 初始化：
  1)复制函数[[scope]]属性创建作用域链
      checkscopeContext = {
          Scope: checkscope.[[scope]],
      }
  2)用arguments创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明
       checkscopeContext = {
           AO: {
               arguments: {
                   length: 0
               },
               scope2: undefined        //此处scope2应该是函数内部的一个变量吧？
           }
       }
  3)将活动对象压入checkscope作用域链顶端
        checkscopeContext = {
            AO: {
                arguments: {
                    length: 0
                },
                scope2: undefined       //此处scope2应该是函数内部的一个变量吧？
            },
            Scope: [AO, [[Scope]]]
        }

4.准备工作做完，开始执行函数，随着函数的执行，修改AO的属性值
       checkscopeContext = {
           AO: {
               arguments: {
                   length: 0
               },
               scope2: 'local scope'    //此处scope2应该是函数内部的一个变量吧？
           },
           Scope: [AO, [[Scope]]]
       }

5.查找到scope2的值，返回后函数执行完毕，函数上下文从执行上下文栈中弹出
        ECStack = [
            globalContext
        ];
