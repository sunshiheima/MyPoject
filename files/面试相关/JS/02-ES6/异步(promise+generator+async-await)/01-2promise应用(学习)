题目：
需要保姆做的事情：
1)你先去超市买菜（异步任务）
2)用超市买回来的菜做饭（异步任务）
3)将做好的饭菜送到老婆单位（异步任务）
4)送到单位后打电话告诉我（同步任务）

代码实现：
1.先列出待做的事情
//1)买菜
function 买菜(resolve, reject){
    setTimeout(function(){
        //买菜的过程
        ...
        //对买好的菜进行下一步处理
        resolve(['西红柿'、'鸡蛋'、'油菜']);
    }, 3000)
}
//2)做饭
function 做饭(resolve, reject){
    setTimeout(function(){
        //做饭的过程
        ...
        //对做好的饭进行下一步处理
        resolve({
            主食: '米饭',
            菜: ['西红柿炒鸡蛋', '清炒油菜']
        })
    }, 3000)
}
//3)送饭
function 送饭(resolve, reject){
    //送饭的过程
    ...
    //对送饭的结果进行下一步处理
    resolve('老婆的么么哒');
}
//4)电话通知我
function 电话通知我(){
    //电话通知的过程
    ...
    //电话通知我后进行下一步处理
    给保姆加100块钱奖金
}

2.去做(即写promise链式调用)
//1)先去超市买菜
new Promise(买菜)

//2)用买好的菜做饭
.then((买好的菜)=>{
    return new Promise(做饭);
})

//3)把做好的饭送到老婆公司
.then((做好的饭)=>{
    return new Promise(送饭);
})

//4)送完饭后打电话通知我
.then((送饭结果)=>{
    电话通知我();
})

------------------------------promise的升级-----------------------

ES6出现了generator和async/await语法，使异步处理更加接近同步代码的写法，可读性更好。
//实现的还是上面的问题
(async ()=>{
    let 蔬菜 = await 买菜();
    let 饭菜 = await 做饭(蔬菜);
    let 送饭结果 = await 送饭(饭菜);
    let 通知结果 = await 通知我(送饭结果);
})();

另：文章中说---async/await也是基于Promise实现的？async不是generator的语法糖嘛？


