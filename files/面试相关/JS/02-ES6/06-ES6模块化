【模块化】

1.模块化方案
-浏览器端：AMD、ES6 Module(现)
-服务端：CMD、CommonJS(现)

2.注意
-ES6 Module默认目前还没有被浏览器支持，需要使用babel。否则会报错 "Uncaught SyntaxError: Unexpected token {"
-可以在script标签中使用tpye="module"在【同域】的情况下可以解决（非同域情况会被同源策略拦截，webstorm会开启一个同域的服务器没有这个问题，vscode貌似不行）
 <body>
    <script type="module">
        import {a} from './module1.js;
        console.log(a);
    </script>
 </body>

3.ES6模块的特点
-ES6 Module是【静态】的，【即它是在编译阶段运行的】，和var/function一样具有提升效果（这个特点使得它支持tree shaking）
-自动采用严格模式（顶层的this返回undefined）
-ES6 Module支持使用export {变量}导出具名的接口，或者export default导出匿名的接口
 两种导出方式的区别是：export {变量}导出的是一个变量的【引用】，而export default导出的是一个【值】
 即：在第一个模块中，用export导出的变量a，用export default导出了变量b；在第二个模块中，引入了这两个变量。
     若因为某些原因(比如设置了定时器)，第一个模块中的变量a和b的值改变了。
     那么此时第二个模块中引入的变量a的值会跟着改变，因为之前导出的实则是一个引用；而引入的变量b不会跟着改变，因为之前导出的实则是一个值（的拷贝）。    
 //导出
 export {x};            //导出引用
 export default y;      //导出值
 export {z as default}; //导出引用
 //导入
 import {x} from './module.js';    
 import y from './module.js';
 import z from './module.js';

4.CommonJS和ES6 Module的区别
-ES6 Module通过export {变量}输出的是一个变量的引用，通过export default输出的是一个值
 CommonJS输出的是一个值的拷贝（浅拷贝）
-ES6 Module是静态的输出一个接口，发生在编译阶段
 CommonJS运行在服务器上，被设计为运行时加载，即代码执行到那一行才会去加载模块
-CommonJS在第一次加载时，运行一次会生成一个缓存。之后加载返回的都是缓存中的内容。

-------------------------------------------------

【新的提案】
关于ES6 Module的静态编译。导致了无法动态加载。
-把import作为一个函数可以实现动态加载模块，它返回一个Promise，Promise被resolve时的值为输出的模块
if(true){
    import('./module.js').then(res => {
        console.log(res);
    })
}

//使用静态编译的ES6 Module放在条件语句中会报错，因为会有提升的效果,并且也是不允许的

重！Vue中路由的懒加载的ES6写法就是使用了这个技术，使得在路由切换的时候能够动态的加载组件渲染视图






