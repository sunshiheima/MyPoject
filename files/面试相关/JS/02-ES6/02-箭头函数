【箭头函数】

1.[箭头函数]和[使用function关键字创建的函数]的区别：
-箭头函数没有arguments（建议使用更好的语法，剩余运算符/rest参数替代）
-箭头函数没有prototype属性，不能用作构造函数（不能用new关键字调用）
-箭头函数没有自己this，引用是外层上下文的this。并且箭头函数内部的this，会随着外层上下文的this指向的改变而改变。
  //当我们写() => {} 时箭头函数的this就已经和外层执行上下文的this绑定了。
-使用call/apply/bind，无法改变箭头函数的this
-箭头函数不能用作Generator函数，不能使用yield命令

2.不适用箭头函数的场景：
1) 不要在可能改变this指向的函数，不适合使用箭头函数
    例如Vue中的methods,computed中的方法,生命周期函数，Vue将这些函数的this绑定了当前组件的vm实例
    如果使用箭头函数会强行改变this，因为箭头函数优先级最高（无法再使用call,apply,bind改变指向）
2) 定义对象的方法时，不适合使用箭头函数，会使该方法内部的this指向全局作用域中的this（即window）
    const person = {
        a: 1,
        say: () => {
            console.log(this.a);    //undefined
        }
    }
3) 需要动态this的时候，不适合使用箭头函数，会使里面的this是全局对象
    var btn = document.getElementById('btn');
    btn.addEventListener('click', () => {
        this.classList.add('on');   //会报错，this为window。（我们期待this指向btn）
    })


--------------------------------------------------具体使用（下面的代码必读！）--------------------------------------------------------------
重！具体分析见 ES5/10-setTimout回调函数内部this的指向问题

看几段代码：
//1.
let controller = {
    makeRequest: function(){
        setTimeout(function(){
            console.log(this.a);        //此处this指向window，故结果为undefined
        })
    },
    a: 1
}
controller.makeRequest();

//2
let controller = {
    makeRequest: function(){
        var that = this;
        setTimeout(function(){
            console.log(that.a);        //that指向makeRequest函数的this，又因为是最近的调用makeRequest函数的是controller对象，所以this指向controller对象，故为controller.a，为1 
        })
    },
    a: 1
}
controller.makeRequest();


//3
let controller = {
    makeRequest: function(){
        setTimeout(() => {
            console.log(this.a);        //此处this指向外层函数的this，即makeRequest函数的this，即controller对象，故为controller.a，即1
        })
    },
    a: 1
}
controller.makeRequest();

//4
let controller = {
    makeRequest: () => {
        setTimeout(() => {
            console.log(this.a);        //此处this指向外层函数的this，即makeRequest函数的this。因为makeRequest为一个箭头函数，其内部this指向其外层上下文的this，即全局执行上下文，为window.a，即undefined
        })
    },
    a: 1
}
controller.makeRequest();

