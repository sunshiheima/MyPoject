
手写webpack核心原理，这个文章特别特别好思路很清晰！我也看懂了！值得反复阅读！重点在于思路和递归过程（还是能理解的）
https://juejin.im/post/6854573217336541192#heading-7

核心打包原理：
1.获取主模块(index.js)内容
2.将获取到的内容转AST：由babel/parser包来完成
3.对模块内容进行处理：由babel/traverse包来【遍历AST收集依赖】；由babel/core和babel/preset-env包来【将es6转es5】
  会返回一个对象moduleInfo，包括该模块的路径(file)、该模块的依赖(deps)、该模块转化成es5的代码(code)
4.递归获取所有依赖
  会返回一个对象depsGraph，该对象当中的每一项，都是以文件的路径为key，{code, deps}为值的形式存储的
5.生成最终代码
   现在的目的就是要生成一个bundle.js文件，也就是打包之后的一个文件。
   思路很简单：把index.js的内容和它的依赖模块整合起来，然后把代码写到一个新建的js文件
   这个过程的关键是：需要处理两个关键字require和export
   -require是实现我们自己写的一个方法，在其内部会递归调用
   -export是一个对象（这也是所谓"ES6模块引入的是一个对象的引用"的原因）
   
----------------------------------

webpack构建流程：
初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler
编译：从 Entry 出发，针对每个 Module 串行调用对应的 Loader 去翻译文件的内容，再找到该 Module 依赖的 Module，递归地进行编译处理
输出：将编译后的 Module 组合成 Chunk，将 Chunk 转换成文件，输出到文件系统中

----------------------------------

模块打包原理：
Webpack 实际上为每个模块创造了一个可以导出和导入的环境，本质上并没有修改 代码的执行逻辑，代码执行顺序与模块加载顺序也完全一致。

