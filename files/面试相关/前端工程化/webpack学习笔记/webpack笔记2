文章讲的是webpack的基本使用以及具体代码。
描述的很详细值得重看，而且描述了 原生JS+webpack => React+webpack。下面的笔记不完备，只是记录了自己需要注意的地方，具体见文章。
//缺点就是这是基于webpack3.5的，现在webpack4有一些细节上的变化了！
https://segmentfault.com/a/1190000006178770



为什么要使用webpack?
为了简化开发的复杂度，社区涌现出了很多好的实践方法：模块化、TypeScript、Scss/Less等CSS预处理器。。。
但是我们开发的文件需要进行额外的处理才能让浏览器识别，而手动处理很繁琐，所以就有了webpack类的工具的出现帮我们进行处理！
什么是webpack?
分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。
webpack会将所有文件都当作模块处理，JS代码、CSS、fonts、图片等等，都可以通过合适的loader处理

_dirname是node.js中的一个全局变量，它指向当前执行脚本所在的目录。

其实webpack的入口、出口、loaders、plugins等功能都可以通过命令行模式实现，但是这样不方便且容易出错。
更好的方法是定义一个配置文件webpack.config.js，它其实是一个简单的javascript模块，我们可以把所有的与打包相关的信息放在里面。
此配置文件(js模块)遵循CommonJS规范：即require("...")和module.exports = {...}

package.json当中不能加注释的原因是：JSON文件不支持注释！

如果不全局安装webpack，那么在命令行直接使用webpack时需要指明其路径即node_modules/.bin/webpack
但是如果在package.json中："scripts": {"start": "webpack"}	//就算不是全局安装的，也无需指明路径
这是因为package.json中的script会按照一定顺序寻找命令对应的位置，本地的node_modules/.bin路径就在这个寻找清单中。
所以在package.json中，无论是全局还是局部安装的Webpack，都不需要指明其路径了

npm的start命令是一个特殊的脚本名称，其特殊性表现在，在命令行中使用npm start就可以执行其对于的命令
如果对应的此脚本名称不是start，想要在命令行中运行时，需要这样用npm run {script name}如npm run build

webpack的强大功能  —— 生成Source Maps（使调试更容易）
  打包后的文件，你是不容易找到出错了的地方，对应到你写的代码的位置的，Source Maps就是来帮我们解决这个问题的
  有四种可选，推荐使用eval-source-map(只能在开发阶段使用，在生产阶段一定不要启用此选项，因为有性能和安全隐患）
  var baseConfig = { devtool: 'eval-source-map' }

devServer配置中:
contentBase-用于指明本地服务器服务对象，而默认webpack-dev-server会为根文件夹提供本地服务器
//文中说本例中设置为"./public"，表明webpack-dev-server运行之后也是会自动打包到./public目录下的!	
port-默认监听端口是8080

React项目，需要将JSX文件转换为JS文件才能够被浏览器识别，故需要使用相应的loader进行编译转换

处理JS的Babel && 处理CSS的PostCSS

Babel是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的：
-让你能使用最新的JavaScript代码（ES6，ES7...），而不用管新标准是否被当前使用的浏览器完全支持；
-让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；
Babel其实是几个模块化的包：
-babel-core: 包含着babel的核心功能
-bable-loader: ?
-babel-preset-env: 用于解析es6
-babel-preset-react: 用于解析JSX

Babel的安装和使用：
一起安装：npm i babel-core babel-loader babel-preset-env babel-preset-react --save-dev
  //写法一：直接在webpack.config.js中配置babel
  module: {
        rules: [
            {
                test: /(\.jsx|\.js)$/,
                use: {
                    loader: "babel-loader",
                    options: {
                        presets: [
                            "env", "react"	//即babel-preset-env，babel-preset-react
                        ]
                    }
                },
                exclude: /node_modules/
            }
        ]
    }
    //写法二：在.babelrc中进行babel的具体配置
    //webpack.config.js中
    module: {
        rules: [
            {
                test: /(\.jsx|\.js)$/,
                use: {
                    loader: "babel-loader"
                },
                exclude: /node_modules/
            }
        ]
    }
    //.babelrc中
    {
       "presets": ["react", "env"]
    }

Babel完全可以在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，
所以支持把babel的配置选项放在一个单独的名为.babelrc的配置文件中，
webpack在运行是会自动调用webpack.config.js和.babelrc的配置

CSS：
webpack提供两个工具处理样式表：css-loader 和 style-loader。二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中
-css-loader: 使你能够使用类似@import 和 url(...)的方法实现 require()的功能
-style-loader: 所有的计算后的样式加入页面中

通常情况下，css会和js打包到同一文件中，并不会打包为一个单独的css文件。
不过通过合适的配置，webpack也可以把css打包为单独的文件的 —— ExtractTextPlugin

CSS Modules:
JS因为模块化，使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元。配合优化工具，依赖管理和加载管理可以自动完成。
CSS发展的比JS慢，因为大多的样式表巨大且充满了全局类名，维护和修改都非常困难。
CSS Modules的技术意在把JS的模块化思想带入到CSS中来。
//只需要在CSS loader中进行简单配置即可，然后就可直接把CSs类名传递到组件代码中，这样就有效避免了全局污染
    module: {
        rules: [
            //...,
            {
                test: /\.css$/,
                use: [
                    {
                        loader: "style-loader"
                    }, {
                        loader: "css-loader",
                        options: {
                            modules: true, // 指定启用css modules
                            localIdentName: '[name]__[local]--[hash:base64:5]' // 指定css的类名格式
                        }
                    }
                ]
            }
        ]
    }

CSS预处理器：
用于将Sass和Less等特殊类型的语句转化为浏览器可识别的CSS语句。
常用的CSS处理loaders: Less Loader  、 Sass Loader 、 Stylus Loader
还存在一个CSS的处理平台PostCSS，也帮助我们实现更多的功能，比如为CSS代码添加适应不同浏览器的CSS前缀。
//1.安装postcss-loader 和 autoprefixer（自动添加前缀的插件）
npm i postcss-loader autoprefixer --save-dev
//2.在webpack配置文件中添加postcss-loader
module: {
        rules: [
            {
                test: /(\.jsx|\.js)$/,
                use: {
                    loader: "babel-loader"
                },
                exclude: /node_modules/
            },
            {
                test: /\.css$/,
                use: [
                    {
                        loader: "style-loader"
                    }, {
                        loader: "css-loader",
                        options: {
                            modules: true
                        }
                    }, {
                        loader: "postcss-loader"		//其具体配置见postcss.config.js文件
                    }
                ]
            }
        ]
    }
//3.在postcss.config.js中
module.exports = {
    plugins: [
        require('autoprefixer')
    ]
}

插件Plugins
是用来拓展webpack功能的，会对整个构建过程起作用。
webpack有很多内置插件，也有很多第三方插件。

常用插件:(具体使用见文，有详细代码）
-webpack.BannerPlugin('版权所有，翻版必究');	//使用它之后打包之后的代码首行就会添加该注释！
-HtmlWebpackPlugin	//依据一个简单的index.html模板，生成一个自动引用你打包之后的JS文件的新index.html。（这在每次生成的js文件名称不同时非常有用（比如添加了hash值）？？？）
-HotModuleReplacement(HMR)	//允许你在修改组件代码后，自动刷新实时预览修改后的效果。
  //这个插件所需的配置比较多
  1.在webpack配置文件中添加HMR插件；
  2.在Webpack Dev Server中添加“hot”参数；
  3.使用Babel的react-transform-hrm插件（故需在.babelrc中对该插件做相关配置）
  
【产品阶段的构建】
在产品阶段，可能还需要对打包的文件进行额外的处理，比如优化、压缩、缓存、分离CSS和JS。
将产品阶段的配置放入专门的配置文件webpack.production.config.js当中。（基本配置和原始的webpack.config.js很像）
注意其中：devtool: 'null'		//这能大大压缩我们的打包代码
package.json中："scripts": { ..., "build" : "NODE_ENV=production webpack --config ./webpack.production.config.js --progress"}
//如果是window电脑，应为"build": "set NODE_ENV=production && webpack --config ./webpack.production.config.js --progress"

【优化插件】
-OccurenceOrderPlugin：为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID
-UglifyJsPlugin：压缩JS代码；
-ExtractTextPlugin：分离CSS和JS文件

【缓存】
使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）
webpack可以把一个哈希值添加到打包的文件名中 —— output: { path: ..., filename: "bundle-[hash].js"}
//在添加了hash之后，会导致改变内容后重新打包时，文件名不同而内容越来越多。
//另一个好用的插件clean-webpack-plugin，配置见文





