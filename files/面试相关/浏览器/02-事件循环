事件循环机制(Event Loop)

事件循环机制产生的原因：
JS是单线程的，即同一时刻，只能做一件事（因为有dom操作，如果有多个线程同时操作一个dom元素的话，就会混乱）
当遇到异步任务（如ajax操作等）时，不可能一直等待异步任务完成，才继续往下执行。因为这样浏览器在此期间时空闲状态，明显会造成巨大的浪费。
Event Loop就是用来协调这些任务的！

Event Loop流程：
【主线程】会一直执行【执行栈】中的同步任务
当异步任务完成，如果该异步任务注册了回调函数，就将此回调函数放入【任务队列】中，任务队列遵循“先进先出”的规则。
当【执行栈】中的任务都执行完毕为空了，系统就去检查【任务队列】，若任务队列中有任务就将任务放入执行栈中，由主线程来执行。

常见的异步任务：
-用户交互，触发之前注册的回调函数
-Ajax数据交互
-setTimeout定时器

宏任务和微任务：
常见的宏任务有：script(整体代码)、setTimeout、I/O操作、UI渲染
常见的微任务有：promise、process.nextTick(node.js环境)

代码执行流程大概是：
1)先将一个宏任务出队，执行某宏任务当中的同步代码（注意Promise在初始化时，传入的函数是同步执行的）
2)再将此宏任务当中的一队微任务出队并执行
3)执行渲染操作，更新界面
4)处理worker相关的任务
5)进行下一轮事件循环（将下一个宏任务出队并执行）

--------------------------------------------

面试题实战：
setTimeout(function () {
    console.log(1);     //4.执行下一个宏任务
});
new Promise(function(resolve,reject){
    console.log(2)      //1.执行script宏任务中的同步代码
    resolve(3)
}).then(function(val){
    console.log(val);   //3.执行script宏任务中的微任务
})
console.log(4);         //2.执行script宏任务中的同步代码
//注：从上面可以看出，宏任务可以包含宏任务(例如上面的【script宏任务】包含【setTimeout宏任务】)

-------------------------------------------极客时间文章笔记-----------------------------------------

此文章本身比较一般，下面笔记就是核心，只能用于应付面试题(给一段包含setTimeout、promise的代码，问输入顺序)。

宏任务和微任务的执行顺序其实很好理解（来自评论区，这个理解使得文章中提到的所有面试题能跑通）：
首先一个js脚本本身对于浏览器而言就是一个宏任务，也是第一个宏任务，而处于其中的代码可能有3种：非异步代码、产生微任务的异步代码（promise等）、产生宏任务的异步代码(settimeout、setinterval等)。
我们知道宏任务处于一个队列中，应当先执行完一个宏任务才会执行下一个宏任务，所以在js脚本中，会先执行非异步代码，再执行微任务代码，最后执行宏任务代码。这时候我们进行到了下一个宏任务中，又按照这个顺序执行。
微任务总是先于宏任务这个说法不准确，应该是处于同一级的情况下才能这么说。实际上微任务永远是宏任务的一部分，它处于一个大的宏任务内。

宏任务和微任务的概念：
首先，一个JS引擎会常驻与内存中，它等待着宿主把JS代码或者函数传递给它执行
-在ES5之前，JS语言本身还没有异步机制。意味着只能由宿主环境传递给JS引擎一段代码，引擎将代码顺次执行 —— 由宿主发起的任务叫做【宏观任务】
-在ES5之后，JS语言本身有了异步机制promise。这样无需浏览器的安排，JS引擎本身也可以发起任务了 —— 由JS引擎本身发起的任务称为【微观任务】

事件循环：
定义-是浏览器的机制，是跑在独立线程中的循环
静态-宏观任务的队列
动态-整个循环做的事情基本上就是反复“等待-执行”，具体过程暂时掠过

Promise:
是JS语言本身的异步机制（而非宿主环境的异步机制）
总体思想是：需要进行io、等待或其他异步操作的函数，无法立即返回真实结果，就立即返回一个“承诺”。
           函数的调用方法可以在合适的时机，选择等待这个承诺实现（通过Promise的then方法的回调）

async/await:
ES7的新特性，它使得我们能用同步方式(for、if等)来编写异步
async函数必定返回Promise，因此async/await函数也属于微观任务 （我们把所有返回Promise的函数都可以认为是异步函数）
在function关键字之前加上async关键字，这样，就定义了一个async函数，我们可以在其中使用await等待一个Promise
在用了async/await之后，宏任务和微任务执行顺序更难界定了（来自评论区，程绍飞赞同）

结合setTimeout和promise解决具体问题：
问题：实现一个红绿灯，把一个圆形div按照绿色3秒，黄色1秒，红色2秒循环改变背景色
代码：
    function sleep(duration){
        return new Promise(function(resolve){
            setTimeout(resolve, duration);
        })
    }
    async function changeColor(color, duration){
        document.getElementById("traffic-light").style.background = color;
        await sleep(duration);
    }
    async function main(){
        while(true){
            await changeColor("green", 3000);
            await changeColor("yellow", 1000);
            await changeColor("red", 2000);
        }
    }
    main();







