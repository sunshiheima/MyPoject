问：react中keys的作用是什么？
答：keys常用于当一个组件包含多个组件时，即列表，keys就是列表中元素的标识，就像人类的身份证一样。这是React性能优化的策略之一。

答：为了说清楚，我还是用一个常见的例子来说明吧！
    例如：我们渲染一个TodoList列表，我们已经渲染了第一项和第二项，现在我们需要往列表里面加一项。就有两种插入方法：
    （当然无论是哪一种方法，都会创建一个新的TodoItem实例，这个TodoItem组件实例需要经历装载过程。）
    1.我们将其插入到最后一个位置：那么对于前两个TodoItem实例，React会引发它们的更新过程，但是只要TodoItem的shouldComponentUpdate函数实现恰当，检查props之后就返回false的话，就可以避免实质的更新操作。
    2.我们将其插入到第一个位置：此时如果要达到和1一样的效果（即通过一些手段使原来的两项不变），React就必须要找出子组件序列的不同之处，而现有的计算出两个序列差异的算法时间复杂度是O(N2)，不适合对性能要求很高的场景。
    所以React选择的是一个很简单粗暴的方法来减低时间复杂度：即不是寻找两个序列的精确差别，而是直接挨个比较每个子组件！
    ----------
    但是这会造成浪费（不该重新渲染的会重新渲染），所以React提供了方法来克服这种浪费，但是需要开发人员的配合。这就是key的作用!

    key的使用：
    我们给每一个列表元素都加上key。这样之前所说的第二种插入方法--把新加入的插入到第一个位置：
    React根据key值，可以知道现在的第二和第三个TodoItem实例其实就是之前的第一个实例和第二个实例，
    只用原来的props来启动更新过程，这样shouldComponentUpdate就会发生作用，避免无谓的更新操作。

    key使用注意：在同级元素中要唯一且稳定不变！（典型的错误做法：用数组下标作为key! 虽然唯一但不稳定！）
    另：key和ref是React保留的两个特殊属性，并没有预期让组件直接访问。

