1.什么是Redux?
    Redux是一个应用数据流框架，主要解决了组件间状态共享的问题。Redux将应用的状态集中管理了。
    Redux主要有三个核心方法：action, store, reducer。
    Redux的工作流程是：
        1) view调用store的dispatch，
        2) dispatch接收action并将其传入reducer，
        3) reducer根据action去改变store当中的数据状态（准确来说不是在原先的基础上直接修改，而是把新数据和旧数据合并之后返回一个全新的数据），
        4) 最后 view通过store提供的getState获取最新数据，将状态改变呈现在页面上
    -------------------------
    Flux主要有四个核心方法：action, dispatch, view, store
    Flux的工作流程是：
        (和Redux主要区别在于：flux中有多个可以改变应用状态的store)
        1) view发出一个action
        23) dispatcher接收action并将其传入store，在store中直接进行数据更新
        4) 更新完成以后，store发出change，view接受change更新视图。

----------------------------------------------------------

2.Redux有什么缺点：
    一个组件所需要的数据，必须由父组件传过来，而不像flux中直接从store取。
    当一个组件相关数据更新时，即使父组件不需要用到这个组件，父组件还是会重新render，可能会有效率影响，或者需要写复杂的shouldComponentUpdate进行判断。

---------------------------------------------------------

3.Redux的基本原则：
  Flux的基本原则是"单向数据流"，Redux在此基础上强调三个基本原则：
  1) 唯一数据源：即应用的状态数据应该只存储在唯一的一个Store上
  2) 保持状态只读：即不能去直接修改状态，要修改store的状态，必须要通过派发一个action对象完成。（这和flux一样）
  3) 数据改变只能通过纯函数完成(指的是Reducer)：reducer函数要做的事情，就是根据state和action的值产生一个新的对象返回。
     注意：reducer必须是纯函数，即：函数的返回结果必须完全由参数state和action决定，而且不产生任何副作用，也不能修改参数state和action对象。
     --------
     数组的reducer方法的功能是：
        把数组所有元素依次做“规约”，它是通过参数reducer函数来完成规约所有元素的功能。
        reducer函数接收两个参数：上一次规约的结果 && 这一次规约的元素。
        reducer函数的返回值：两个参数之和。
       （所以这个规约的结果就是：所有元素之和）

