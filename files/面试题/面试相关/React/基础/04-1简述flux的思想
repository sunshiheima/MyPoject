Flux的最大特点，就是“单向数据流”

1.用户访问View
2.View发出用户的Action
3.Dispatcher收到Action，要求Store进行相应的更新
4.Store更新后，收到一个"change"事件
5.View收到"change"事件后，更新页面

---------------------------------------------------------------

一个Flux应用包含四个部分：
1.Dispatcher(相当于Controller)：处理动作分发，维持store之间的依赖关系
2.Store(相当于Model)：负责存储数据和处理数据相关逻辑
3.Action：驱动Dispatcher的JS对象
4.View(相当于View)：视图部分，负责显示用户界面


-----------------------------------------------------------------

Flux的优点：
1.“单向数据流”的管理方式：
在Flux的体系下，驱动界面改变始于一个动作的派发，除此之外别无他法。
(具体来说，View只能通过get方法获取Store的状态，无法直接去修改状态。如果View想要修改Store状态的话，只有派发一个action对象给Dispatcher.

Flux的不足：
1.Store之间的逻辑依赖关系
   Flux中常常有多个Store。如果两个Store之间有逻辑依赖关系，就必须用上Dispatcher的waitFor函数。
   这种依赖关系的存在增加了应用的复杂度，容易带来新的问题。
  （逻辑依赖关系：例如某Store的某action类型的处理，依赖于另一个Store已经处理过了）
2.Store混杂了逻辑和状态
   Store封装了【数据】和【处理数据的逻辑】。当我们需要动态替换一个Store的逻辑时，只能把这个Store整体替换掉，那也就无法保持Store中存储的状态。
