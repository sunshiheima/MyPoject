当多个组件都需要某个功能，而且这个功能和界面没有关系，所以也不能简单的抽取成一个组件，
但是如果让同样的逻辑在各个组件里实现，无疑会导致重复代码。

如果构建更易于复用、更灵活的React高级组件，两种方式：
1.高阶组件(HOC)
2.以函数为子组件的模式（09-编程题就是这种）

--------------------------------------------------------------------------------------
高阶组件：
    就是一个函数，这个函数接受一个组件作为输入，然后返回一个新的组件作为结果，
    而且，返回的新组件拥有了输入组件所不具有的功能。

高阶组件的用法：
    1.代理方式的高阶组件：操纵props、访问ref、抽取状态(react-redux的connect函数)、包装组件(style)
    2.继承方式的高阶组件：操纵props(还是用代理方式的比较好)、操纵生命周期函数(这是继承方式高阶组件特用的场景,代理方式无法修改传入组件的生命周期函数，所以不具备这个功能！)

典型应用：react-redux的connect函数
    注意connect函数本身并不是高阶组件，connect函数执行的结果是另一个函数，这个函数才是高阶组件。
    所谓抽取状态：
        即在傻瓜组件和容器组件的关系中，通常让傻瓜组件不要管理自己的状态，只要做一个无状态的组件就好，
        所有状态的管理都交给外面的容器组件，这个模式就是“抽取状态”
    这个高阶组件的作用实则就是：使得新组件能够访问context中的store


注意：此处我们是把增强功能的函数叫做“高阶组件”（这是更普遍的定义）
     而在有的文献中：将上面提到的函数返回的结果叫做“高阶组件”，而这个增强功能的函数叫做“高阶组件工厂函数”（这是更严谨的定义）


