【setState是同步的还是异步的】（学习笔记见下）

-setState只在合成事件和钩子函数中是异步的，在原生事件和setTimeout中都是同步的
-setState的“异步”并不是说内部由异步代码实现， 其实本身执行的过程和代码都是同步的，
 只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形成了所谓的“异步”
 当然可以通过第二个参数setState(partial, callback)中的callback拿到更新后的结果
-setState的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout中不会批量更新
 在“异步”中如果对同一个值进行多次setState，setState的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时setState多个不同的值，在更新时会对其进行合并批量更新。

----------

【调用setState之后发生了什么】

首先会改变this.state，具体来说就是将传入的参数对象与组件当前的状态合并，然后驱动组件的更新过程。
这也就是我们修改this.state的值，必须得用this.setState，而不能直接修改this.state的原因：
直接修改this.state，虽然事实上改变了组件的内部状态，但只是野蛮的修改了state，却没有驱动组件的重新渲染，
所以即使this.state的值真正的改变了，也不会将此改变实时的呈现到页面上！







------------------------------------------------------------下面为学习笔记---------------------------------------------------------------

写的很好！重点在下面，文中提到的一些react源码看不懂，也不用看。知道下面的即可！
https://juejin.im/post/6844903636749778958#heading-1

综合实例：
class App extends React.Component {
  state = { val: 0 }

  componentDidMount() {
    this.setState({ val: this.state.val + 1 })
    console.log(this.state.val)

    this.setState({ val: this.state.val + 1 })
    console.log(this.state.val)

    setTimeout(_ => {
      this.setState({ val: this.state.val + 1 })
      console.log(this.state.val);

      this.setState({ val: this.state.val + 1 })
      console.log(this.state.val)
    }, 0)
  }

  render() {
    return <div>{this.state.val}</div>
  }
}

钩子函数中的 setState 无法立马拿到更新后的值，所以前两次都是输出0
当执行到 setTimeout 里的时候，前面两个state的值已经被更新，由于 setState 批量更新的策略， this.state.val 只对最后一次的生效，为1
而在 setTimmout 中 setState 是可以同步拿到更新结果，所以 setTimeout 中的两次输出2，3
最终结果就为 0, 0, 2, 3




------------------------------------------------------------下面为具体--------------------------------------------------------------------

【合成事件中的setState】
合成事件：即react为了解决跨平台、兼容性问题，自己封装了一套事件机制，代理了原生事件。
         例如jsx中的onClick、onChange都是合成事件。

class App extends Component {
    state = {val: 0}
    increment = () => {
        this.setState({val: this.state.val + 1})
        console.log(this.state.val);    //输出更新前的val -> 0
    }
    render(){
        return (
            <div onClick={this.increment}>
                {`Counter is: ${this.state.val}`}   //渲染结果是更新后的值，1？
            </div>
        )
    }
}

//try-finally: 会先执行try代码块中的语句，然后再执行finally中的代码。
-当你在increment中调用setState之后去console.log时，是属于try代码块中的执行。
 但是由于是合成事件，try代码块执行完state并没有更新，所以你输入的结果是更新前的state值，这就导致了所谓的“异步”
-当你的try代码块执行完时(也就是你的increment合成事件)，这个时候会去执行finally里的代码，在finally中执行了performSyncWork方法，这个时候才会去更新你的state并且渲染到UI上。

----------------

【生命周期函数中的setState】

class App exntends Component {
    state = {val: 0}
    componentDidMount(){
        this.setState({val: this.state.val + 1})
        console.log(this.state.val);    //输出更新前的值 -> 0
    }
    render(){
        return (
            <div>
                {`Counter is : ${this.state.val}`}  //渲染结果是更新后的值，1？
            </div>
        )
    }
}

和合成事件一样，当componentDidMount执行时，react内部并没有更新，执行完componentDidMount后才去commitUpdateQueue更新。
这就导致你在componentDidMount中setState完去console.log拿到结果还是更新前的值。

------------------

【原生事件中的setState】

原生事件是指非react合成事件，原生自带的事件监听addEventListener / document.querySelector().onClick

class App exntends Component {
    state = {val: 0}
    changeValue = () => {
        this.setState({val: this.state.val + 1})
        console.log(this.state.val);    //输出更新后的值 -> 1
    }
    componentDidMount(){
        document.body.addEventListener("click", this.changeValue, false);
    }
    render(){
        return (
            <div>
                {`Counter is : ${this.state.val}`}  //渲染结果是更新后的值，1？
            </div>
        )
    }
}

原生事件的调用栈比较简单，因为没有走合成事件那一大堆，直接触发click事件，到requestWork，在requestWork里由于expirationTime === Sync的原因，直接走了performSyncWork去更新
并不像合成事件或钩子函数中被return，所以当你在原生事件中setState后，能同步拿到更新后的state值。

-------------------

【setTimeout中的setState】
注意：setTimeout中去setState并不算是一个单独的场景，它是随着你外层去决定的。
      可以在合成事件中setTimeout、在钩子函数中setTimeout、在原生事件setTimeout

class App exntends Component {
    state = {val: 0}
    componentDidMount(){
        setTimeout(() => {
            this.setState({val: this.state.val + 1})
            console.log(this.state.val);      //输出更新后的值 -> 1
        })
    }
    render(){
        return (
            <div>
                {`Counter is : ${this.state.val}`}  //渲染结果是更新后的值，1？
            </div>
        )
    }
}

无论setTimout用于哪个场景下，基于event loop模型，setTimeout是宏任务会在下一个事件循环才会执行，setTimeout中去setState总能拿到最新的state值。

--------------------

【setState中的批量更新】

class App extends Component {
  state = { val: 0 }
  batchUpdates = () => {
    this.setState({ val: this.state.val + 1 })
    this.setState({ val: this.state.val + 1 })
    this.setState({ val: this.state.val + 1 })
  }
  render() {
    return (
      <div onClick={this.batchUpdates}>
        {`Counter is ${this.state.val}`} // 1
      </div>
    )
  }
}

在setState时react内部会创建一个updateQueue，通过firstUpdate、lastUpdate、lastUpdate.next去维护一个更新的队列
在最终的performwork中，相同的key会被覆盖，只会对最后一次setState进行更新




