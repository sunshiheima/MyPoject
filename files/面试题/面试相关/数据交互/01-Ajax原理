手写AJAX：
var xhr = new XMLHttpRequest();
xhr.onreadystatechange=function()  { 
    if (xhr.readyState==4 &&xhr.status==200)  { 
        //responseText 获得字符串形式的响应数据。
        //responseXML 获得XML形式的响应数据。
        console.log(xhr.responseText);  
    }
}
xhr.open(method, url, async);
xhr.setRequestHeader(key, value);   //注意！：post请求一定要设置请求头的格式内容
send(参数-通常post请求会携带的); 

---------

例如：
var xhr = new XMLHttpRequest();
xhr.onreadystatechange=function()  { 
    if (xhr.readyState==4 &&xhr.status==200)  { 
        console.log(xhr.responseText);  
    }
}
xhr.open("POST","test.html",true);  
xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");  
xhr.send("fname=Henry&lname=Ford");  //post请求参数放在send里面，即请求体

--------

【readyState】
是XMLHttpRequest对象的一个属性，用来标识当前XMLHttpRequest对象处于什么状态。
readyState总共有5个状态值，分别为0~4，每个值代表了不同的含义：
-0：未初始化 -- 尚未调用.open()方法；
-1：启动 -- 已经调用.open()方法，但尚未调用.send()方法；
-2：发送 -- 已经调用.send()方法，但尚未接收到响应；
-3：接收 -- 已经接收到部分响应数据；
-4：完成 -- 已经接收到全部响应数据，而且已经可以在客户端使用了；




---------------------------------------------------------------------下面仅供了解------------------------------------------------------------------


AJAX (Asynchronous Javascript And XML)
-用户在不需要重新刷新页面的情况下，Ajax 通过异步请求加载后台数据，并在网页上呈现出来。
 常见运用场景有表单验证是否登入成功、百度搜索下拉框提示和快递单号查询等等。
-可以令开发者只向服务器获取数据（而不是图片，HTML文档等资源），使得互联网资源的传输变得轻量级

【AJAX原理】
AJAX核心依赖就是浏览器提供的XMLHttpRequest对象。
AJAX可以完成异步的网络请求任务。

【AJAX使用】
1.创建AJAX核心对象XMLHttpRequest（记得考虑兼容性）
var xhr = null;
if(window.XMLHttpRequest){
    xhr = new XMLHttpRequest();
}else{
    xhr = new ActiveXObject("Microsoft.XMLHTTP");   //兼容IE5、IE6
}

2.向服务器发送请求
xhr.open(method, url, async);
xhr.setRequestHeader(key, value);   //注意！：post请求一定要设置请求头的格式内容
send(string); 
//method: 请求方法，GET/POST 
//url: 文件在服务器上的位置
//async:  true为异步，false为同步
//string即请求需带的参数，通常是post请求需带

例如：
xhr.open("POST","test.html",true);  
xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");  
xhr.send("fname=Henry&lname=Ford");  //post请求参数放在send里面，即请求体

3.处理服务器响应（区分同步和异步两种情况）
//responseText 获得字符串形式的响应数据。
//responseXML 获得XML形式的响应数据。

同步处理：
xhr.open("GET","info.txt",false);  
xhr.send();  
document.getElementById("myDiv").innerHTML=xhr.responseText; //获取数据直接显示在页面上

异步处理：//在【请求状态改变】事件中处理
xhr.onreadystatechange=function()  { 
    if (xhr.readyState==4 &&xhr.status==200)  { 
        document.getElementById("myDiv").innerHTML=xhr.responseText;  
    }
}

【readyState】
是XMLHttpRequest对象的一个属性，用来标识当前XMLHttpRequest对象处于什么状态。
readyState总共有5个状态值，分别为0~4，每个值代表了不同的含义：
-0：未初始化 -- 尚未调用.open()方法；
-1：启动 -- 已经调用.open()方法，但尚未调用.send()方法；
-2：发送 -- 已经调用.send()方法，但尚未接收到响应；
-3：接收 -- 已经接收到部分响应数据；
-4：完成 -- 已经接收到全部响应数据，而且已经可以在客户端使用了；

【status】
即HTTP响应报文中，状态行中的状态码。
304：Not Modified（服务器端资源未改变，可直接使用客户端未过期的缓存）

