讲的很好！而且条理清晰无废话，可以直接拿来背！（直接背下面的笔记吧！）
https://juejin.im/post/6844903521272201223

--------------------------------------------------------------------------------

【总结HTTPS加密传输的过程】—— 非对称加密:客户端验证服务器身份&&把对称密钥交给服务器(HTTPS四次握手) ; 对称加密:客户端和服务器之间交换数据(正式进行HTTPS通信)
//先进行HTTPS四次握手
-客户端：我需要发起一个HTTPS请求，请给我公钥
-服务器：好的，这是我的证书，即(用权威机构私钥加密后的)公钥。【为了确保原始证书没被篡改，我们在传递证书的同时传递证书的哈希值】。
-客户端：配置有权威机构公钥，用其对证书进行解密，【校验哈希值】，得到公钥，并给服务器(用该公钥加密后的)对称密钥
-服务器：用私钥解密，得到对称密钥
之后服务器和客户端就可以相互传输报文了，服务器会用该对称密钥对传输数据进行加密，客户端进行解密拿到数据。

【推导过程】
1.如何加密信息？—— 对称加密
  -客户端：我需要发起一个HTTPS请求
  -服务器：告知客户端密钥是xxx
2.对称密钥如何传输？—— 非对称加密
  //非对称加密有两个密钥，一个是公钥，一个是私钥。公钥加密的内容只有私钥可以解密，私钥加密的内容只有公钥可以解密。
  //一般我们把服务器自己留着不对外公布的密钥成为【私钥】，把所有人都可以获取的称为【公钥】  
  -客户端：我需要发起一个HTTPS请求，这是我的(用公钥加密后的)密钥。
  -服务器：用私钥解密，得到密钥
3.公钥如何传输？—— 用权威机构私钥进行加密
  -客户端：我需要发起一个HTTPS请求，请给我公钥
  -服务器：好的，这是我的证书，即(用权威机构私钥加密后的)公钥
  -客户端：配置有权威机构公钥，用其对证书进行解密，得到公钥，并给服务器(用公钥加密后的)密钥
  -服务器：用私钥解密，得到密钥
4.怎么知道证书有没有被篡改？—— 我们在传递证书的同时传递证书的哈希值

-----------------------------------------------------------------------------------

【什么是HTTPS？】
-HTTPS是安全的HTTP：通过HTTP协议传输的内容都是明文传输的，HTTPS的目的是将这些内容加密使其安全传输
-最后一个字母S指的是SSL/TLS协议(TLS是SSL的改进版)，SSL/TLS是在【传输层】进行加密的，位于HTTP协议和TCP协议的中间。

【信息传输安全是什么意思？】（下面三条HTTP都做不到）
-客户端和服务器直接的通信内容只有它们自己能看懂，即使第三方拿到数据也看不懂这些信息的真实含义
-客户端必须避免中间人攻击，即除了真正的服务器，任何第三方都无法冒充服务器
-第三方虽然看不懂数据，但可以乱改数据，因此客户端和服务器必须有能力判断数据是否被修改过

-----------------------------------------------------------------------------------

【HTTPS的四次握手会影响性能么？】—— 会，但是可以接受
-首先，HTTPS肯定会慢一点，时间主要花费在两组SSL之间的耗时和证书的读取验证上（对称算法的加解密时间几乎可以忽略不计）
-但是，如果不是首次握手，后续的请求并不需要完整的握手过程。客户端可以把上此加密情况直接发送给服务器从而快速恢复（？）—— 文中有参考文章链接
-此外，SSL握手的时间并非只能用来传递加密信息，还可以承担起客户端和服务器沟通HTTP2兼容情况的任务。
 因此从HTTPS切换到HTTP2不会有任何性能上的开销，反倒是得益于HTTP2的多路复用等技术，后续可以节约大量时间。

-------------------------------------------------------------------------------------

【HTTPS无法解决的问题？】
如果你请求的就不是真正的服务器，而是一个攻击者，此时它完全有机会进行中间人攻击。
-如果我们不小心安装过非权威机构的根证书，比如黑客提供的恶意证书，这是设备上就多了一个预设的公钥，那么用恶意私钥加密的证书就能被正常解析出来。
 //所以千万不要随便安装根证书，这等于是为那些恶意证书留了一扇门
 Charles:
 -Charles可以调试HTTPS通信，它的原理就是需要用户安装Charles的根证书，然后我们的请求会被代理到Charles服务器，它下发的Charles证书才能被正确解析。
 -Charles会作为客户端，从真正的服务器那里拿到正确的https证书并用于后续通信。
 -如果Charles的私钥泄漏，对用户会造成很大的影响。当然这是Charles的保命丸，不会让黑客得到的啦。

  









-------------------------------------------------------下面为HTTPS加密机制的推导过程（供了解，很经典！）-----------------------------------------------

1.如何加密信息？—— 使用对称加密
使用对称加密，那么HTTPS在传输报文之前，需要先进行两次握手，【用来传递对称加密的密钥】
-客户端：我需要发起一个HTTPS请求
-服务器：告知客户端密钥是xxx
之后客户端就使用该密钥对报文进行加密，服务端接收到加密报文之后使用密钥对其解密，即可拿到报文内容。

缺点：服务器返回密钥是明文传输的不安全，攻击者可以将这个密钥替换为自己的密钥。。。

2.对称密钥如何传输？—— 利用(非对称加密)来加密密钥
非对称加密：
    -非对称加密有两个密钥，一个是公钥，一个是私钥。公钥加密的内容只有私钥可以解密，私钥加密的内容只有公钥可以解密。
    -一般我们把服务器自己留着不对外公布的密钥成为【私钥】，把所有人都可以获取的称为【公钥】  
分析：
    -缺点：非对称加密的特性决定了服务器用私钥加密的内容并不是真正的加密，因为公钥所有人都有，所以服务器的密文能被所有人解析。
    -优点：但私钥只掌握在服务器手上，这就带来了两大优势：
      -服务器发的内容不可能被伪造，因为别人都没有私钥，所以无法加密。强行加密的后果就是客户端用公钥无法解开。
      -任何人用公钥加密的内容都是绝对安全的，因为私钥只有服务器有，也就是只有真正的服务器可以看到被加密的原文。
    -结论：所以密钥不是由服务器下发，而是由客户端生成并且主动告诉服务器

故HTTPS的两次握手变为：
-客户端：我需要发起一个HTTPS请求，这是我的(用公钥加密后的)密钥。
-服务器：用私钥解密，得到密钥
之后客户端就使用该密钥对报文进行加密，服务端接收到加密报文之后使用密钥对其解密，即可拿到报文内容。

3.那公钥怎么传输？—— 用权威机构私钥进行加密即可
每一个使用HTTPS的服务器都必须取权威证书机构注册一个证书，证书中存储了(用权威机构私钥加密的)公钥。

故HTTPS的握手变成了四次：
-客户端：我需要发起一个HTTPS请求，请给我公钥
-服务器：好的，这是我的证书，即(用权威机构私钥加密后的)公钥
-客户端：配置有权威机构公钥，用其对证书进行解密，得到公钥，并给服务器(用公钥加密后的)密钥
-服务器：用私钥解密，得到密钥

问题：
客户端能得到权威机构公钥，那么攻击者同样能得到，所以同样不安全。
那么我们就退一步，让攻击者使用权威机构公钥，解密证书得到我们服务器要返回给客户端的公钥。
//但是得到了这个公钥没有用呀！因为此公钥加密后的东西只有私有能解开，而私钥只有服务器自己拥有。
//但是攻击者就可以篡改这个公钥，替换为攻击者自己的公钥，这样。。。
//所以我们重点要防的是攻击者篡改此公钥(即证书)

4.怎么知道证书有没有被篡改？—— 将信息hash值随着信息一起传递

//哈希算法的特点——可以压缩数据
无论多复杂的数据（定义域可以非常大），经过哈希算法都会得到一个值，而且这个值处在某个特定（远小于定义域的范围）值域内。
相同数据的哈希结果一定相同，不相同数据的哈希结果一般不同，不过也有小概率会重复，这叫哈希冲突。

为了确保原始证书没被篡改，我们在传递证书的同时传递证书的哈希值。
-攻击者用权威机构公钥，解密证书得到我们服务器要返回给客户端的公钥。并且篡改了此公钥（证书内容）
-但是攻击者没有权威机构私钥，所以无法正确的加密。所以它再返回给客户端的数据是无效数据，客户端用公钥解析后会得到乱码。
 即使碰巧能解析，篡改了证书内容之后，哈希值会变，无法通过哈希校验，所以仍然是无效数据。

