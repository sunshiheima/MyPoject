//常用的服务器有Apache和Nginx

服务器的作用：
一台服务器可以作为源服务器，可以用作代理和缓存，甚至可以在一台服务器上搭建多个不同域名的网站。

-------------------------------------------------------------------------

【虚拟主机】
HTTP/1.1规范允许一台HTTP服务器搭建多个web站点（不同域名的网站）
利用虚拟主机的功能，可以在一台物理服务器(一个IP地址)上虚拟出多个主机，每个主机映射一个独立的域名。
-http://www.laogeng.com/时，DNS域名系统会将其解析成IP地址，根据IP找到物理服务器；
-然后再通过请求首部的HOST字段确认对应的虚拟主机（这就是为什么HTTP/1.1强制要求携带HOST）

--------------------------------------------------------------------------

【代理服务器】
即客户端和服务器之间的中间商。即HTTP请求通过代理服务器转发给服务器，再将服务器的响应返回给客户端的行为。
代理服务器可以用来作为【缓存服务器】，也可以用来隐藏用户身份【正向代理】或者隐藏服务器身份【反向代理】增加安全性。

//正向代理（科学上网）
从客户端角度出发，为了从源服务器中取得内容，由客户端向代理服务器发出请求，并指定目标访问服务器
然后代理服务器向源服务器转交需求，并将获得的内容返回给客户端。
注意：在正向代理过程中隐藏了真实请求的客户端，即服务端不知道正式请求客户是谁

//反向代理（负载均衡，Nginx就是一种出色的反向代理服务器）
客户端向反向代理发出请求，反向代理服务器收到需求后判断请求走向何处，然后再将结果反馈给客户端。
注意：在反向代理过程中，隐藏了内部服务器的信息。用户不需要知道是具体哪一台服务器提供的服务，只要知道反向代理服务器是谁就好了。我们甚至可以把反向代理服务器当做真正服务器看待。

//反向代理（跨域问题）
总结：本地服务在浏览器向本地服务发起请求 --> 本地代理转发 --> 目标服务器 --> 响应数据后通过代理伪装成本地服务器请求的返回值 --> 浏览器接受到目标服务器的数据
在使用脚手架工具(vue-cli、create-react-app)进行开发时，经常会遇到跨域问题。
因为项目自身启动本地服务是需要占用一个端口（如 http://localhost:8080），所以必然会产生跨域的问题（因为本地服务端口和服务端接口地址不是同源）
之所以出现跨域是因为浏览器有同源策略的限制，但服务器是没有的同源策略的限制的。
-当我们本地服务（假设域名：http://localhost:8080）要请求目标服务器（假设域名：target.com）的资源的时候
 我们不直接请求target.com，而是请求本地服务自身 http://localhost:8080（这时是同源请求，不存在跨域）
-本地代理服务再将接口转发给target.com（注意这时候是两个服务器直接的通信了，而不是客户端和服务器的通信，所以更不存在跨域）
-本地服务获取到目标服务器的响应数据之后通过再【代理伪装成本地服务请求】的返回值返回给客户端。
//vue.config.js中配置devServer中的proxy字段（表示该devServer会充当一个反向代理服务器的角色？）
//注意：若要用反向代理，则在axios配置时，请求baseURL必须设置为字符串"/"，否则proxy会匹配不到"/api"导致代理失败。

-------------------------------------------------------------------------------

【缓存服务器】
缓存服务器指的是将需要频繁访问的网络内容存放在离用户较近、访问速度更快的服务器中，以提高内容访问速度的一种技术。
缓存服务器是浏览器和源服务器之间的中间服务器，浏览器先向这个中间服务器发起HTTP请求，经过处理后（比如权限验证，缓存匹配等），再将请求转发到源服务器。



