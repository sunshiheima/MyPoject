队列是什么？
    和栈一样，是一种操作受限的“线性表”，只允许在队尾插入数据，在对头删除数据。最大的特点就是后进后出。

队列的实现方式：
    1.用数组实现的队列 —— 顺序队列
    2.用链表实现的队列 —— 链式队列

队列的操作：
    1.入队(enqueue)：在队尾插入一个元素，我感觉时间复杂度为O(1)
    2.出队(dequeue)：在对头删除一个元素，优化之后的时间复杂度为O(1)---优化：即当队列满的时候再统一一次数据搬移操作。

----------------------------------------------------------------------------------------------------

特殊队列：循环队列
    用数组来实现队列时，在tail === n时，会有数据搬移操作，这样入队操作性能就会受到影响。
    那有没有办法能够避免数据搬移了？——循环队列！
    -----
    循环队列代码实现难度比前面讲的非循环队列实现 难多了
    （作者认为关键是：要确定好对空和队满的判定条件！）
    -----
    在用数组实现的非循环队列中：队满(tail == n) ；队空(head == tail)
    循环队列：队满((tail+1) % n == head))；队空(head == tail)

-----------------------------------------------------------------------------------------------------

队列应用：
    很广泛，它们在很多偏底层系统、框架、中间件的开发中，起着关键性的作用。
    队列这种结构很基础，平时的业务开发不大可能从零实现一个队列，甚至都不会直接用到。
    而一些具有特殊特性的队列应用比较广泛，比如阻塞队列&&并发队列

    1.阻塞队列：（定义的实则就是：生产者-消费者模型）
    即在队列基础上增加了阻塞操作。简单来说：
    在队列为空的时候，从队头取数据会被阻塞。因为此时还没有数据可取，知道队列中有了数据才能返回；
    如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后再插入数据，然后再返回。
    ------
    这种基于阻塞队列实现的“生产者-消费者”模型，可以有效的协调生产和消费的速度。

    2.并发队列：
    在多线程情况下，会有多个线程同时操作队列，这个时候就会存在线程安全问题，那如何实现一个线程安全的队列呢？
    线程安全的队列我们叫做【并发队列】，最简单直接的实现方式：
    即在enqueue()、dequeue()方法上加锁，但是锁粒度大并发度会比较低，同一时刻仅允许一个存或取操作。

---------------------------以下了解即可--------------------------------
解答开篇：
问题：
    当我们向固定大小的线程池中请求一个线程时，如果线程中没有空闲资源了，这个时候线程池如何处理请求？
答：
    我们一般有两种处理策略：
        1.非阻塞的处理方式：直接拒绝任务请求
        2.阻塞的处理方式：请求排队，等到有空闲线程的时候，取出排队的请求继续处理。
    实现请求排队用什么数据结构：
        我们希望公平地处理每个排队地请求，先进者先服务，所以队列这种数据结构很适合来存储排队请求。
        而队列又分为两种：
        1.基于链表地实现方式，不合适！可以实现一个支持无限排队地无限队列。但是可能会导致过多地请求排队的等待，请求处理地响应时间过长。
        2.基于数组实现地有界队列，合适！当线程池种排队地请求超过队列大小时，接下来地请求就会被拒绝，这种方式对响应敏感地系统来说，就相对更加合理！

---------------------------------------------------------
重点：
    实际上，对于大部分资源有限的场景，例如：线程池、数据库连接池。
    当没有空闲资源时，基本上都可以通过“队列”这种数据结构来实现请求排队。




