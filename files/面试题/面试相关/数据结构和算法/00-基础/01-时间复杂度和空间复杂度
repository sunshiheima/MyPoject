https://juejin.im/book/6844733800300150797/section/6844733800346304526

时间复杂度
概念：算法的时间复杂度，它反映的不是算法的逻辑代码到底被执行了多少次T(n)，而是随着输入规模的增大，算法对应的执行总次数的一个【变化趋势】O(n)

T(n) -> O(n)
若T(n)是常数，那么直接简化为1
若T(n)是多项式，比如3n^2+5n+3，我们只保留次数最高的那一项，并且将其常数系数无脑改为1
若T(n)是对数，底数和系数都要被简化掉->logn/log2n?这样的

所以我们在不精确分析时，其实只需抓主要矛盾即可！即整段代码中，执行次数最多的代码，的执行次数，简化之后的

注意：规模n*n的二维数组遍历时，最内层循环的内部代码会执行n*n次，其对应的时间复杂度为O(n^2)
          规模n*m的二维数组遍历时，最内层循环的内部代码会执行n*m次，其对应的事件复杂度为O(n*m)

常见的时间复杂度有：
常数时间O(1)、对数时间O(logn)、线性时间O(n)、线性对数时间O(nlogn)、二次时间O(n^2)、三次时间O(n^3)、指数时间O(2^n)
其中O(nlogn)和O(2^n)还未看到示例

--------------------------------------------------------------------------------------------------------------

空间复杂度
概念：空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度，它是内存增长的趋势

注意：若整段代码对内存的占用量是恒定的，那么它对应的空间复杂度就是O(1)
如果要初始化一个规模为n的数组(n为我们传入函数的参数)，那么它对应的时间复杂度就是O(n)
如果要初始化一个规模为n*n的数组(n为我们传入函数的参数),那么它对应的时间复杂度就是O(n^2)

常见的空间复杂度有：
O(1)、O(n)、O(n^2)

时间复杂度：表示代码执行时间随数据规模增长的变化趋势
空间复杂度：表示代码占用空间随数据规模增长的变化趋势



