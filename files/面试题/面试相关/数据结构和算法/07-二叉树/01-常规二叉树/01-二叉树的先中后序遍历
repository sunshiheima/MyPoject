/*
把递归过程讲的特别好！
https://juejin.im/book/6844733800300150797/section/6844733800346288142
*/
// function preorder(root){

// }
// function inorder(root){

// }
// function postorder(root){

// }

function preorder(root) {
  if (!root) {
    return;
  }
  console.log(root.val);
  preorder(root.left);
  preorder(root.right);
}
function inorder(root) {
  if (!root) {
    return;
  }
  inorder(root.left);
  console.log(root.val);
  inorder(root.right);
}
function postorder(root) {
  if (!root) {
    return;
  }
  postorder(root.left);
  postorder(root.right);
  console.log(root.val);
}

//先序遍历
function preorder(root) {
  //递归边界，root为空
  if (!root) {
    return;
  }
  //输出当前遍历的节点值
  console.log("当前遍历的节点值是:", root.val);
  //递归遍历左子树
  preorder(root.left);
  //递归遍历右子树
  preorder(root.right);
}

//中序遍历
function inorder(root) {
  if (!root) {
    return;
  }
  inorder(root.left);
  consolelog(root.val);
  inorder(root.right);
}

//后序遍历
function postorder(root) {
  if (!root) {
    return;
  }
  postorder(root.left);
  postorder(root.right);
  console.log(root.val);
}

/*
--------------------------------------------------------------------下面是看时的笔记（推荐看）-------------------------------------------------------

二叉树的各种姿势的遍历，是非常容易作为独立命题点来考察的。
本节涉及的编码内容，千万不要沉溺在“我看懂了”、“我理解了“这种虚无的成就感中——假的，都是假的，只有自己写出来的代码才是真的
理解只是记忆的前提，只吹理解不记忆，不如回家去种地。。。
面试时二叉树的遍历，你不能再去想太多，没有时间给你现场推理，你要做的是默写！默写啊！

二叉树的遍历：即以一定的顺序规则，逐个访问二叉树的所有节点，这个过程就是二叉树的遍历。

按照顺序规则的不同，遍历方式分为：
递归遍历 —— 先、中、后序遍历
迭代遍历 —— 层次遍历

先序遍历： 根节点->左子树->右子树
中序遍历：左子树->根节点->右子树
后序遍历：左子树->右子树->根节点

function TreeNode(val){
	this.val = val;
	this.left = null;
	this.right = null;
}
var root = new TreeNode(0);
root.left = new TreeNode(1);
root.right = new TreeNode(2);


重点：
1.进入preorder(null)，发现抵达了递归边界，直接return掉。紧接着是preorder(D)的逻辑往下走，走到了preorder(root.right)。
需要注意：递归会往执行栈中压入多个函数，这些函数都一样，只是传入的参数不同而已。
当前执行的函数即位于执行栈顶的那个函数：若该函数return了，那么该函数就会被弹出栈，接下来的栈顶函数就是在该函数之前压入栈的函数；若该函数没有return，那么它就一直会在栈中，直到最后到达边界条件的函数return了，下面的函数才会被一个个弹出栈！

2.此时preorder(F)已经执行完了，返回preorder(C)；发现preorder(C)也执行完了，就回到preorder(A)；发现preorder(A)作为递归入口，它的逻辑也已经执行完了，于是我们的递归活动就正式画上了句号。
注意：其实就是之前压入栈尚未执行完的函数一个个执行完了（即最后一句代码已执行到达了函数的})，弹出栈了！当执行栈当中已无函数了，这整个递归函数就执行完了~

3.前面的1和2都是以”先序遍历“为例子的讲解
而“中序遍历”和“后序遍历”其实就只是把代码换了一下顺序而已。
注意：表面上只是代码换了顺序，实则是函数入栈和出栈的顺序发生了改变。
*/
