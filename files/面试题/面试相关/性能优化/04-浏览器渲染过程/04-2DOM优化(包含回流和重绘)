【DOM为什么这么慢？】
JS引擎和渲染引擎是相互独立的，当我们用JS去操作DOM时，本质上是JS引擎和渲染引擎之间进行了“跨界交流”。
1.过桥很慢：每操作一次DOM（访问/修改）都要过桥，次数多了，就产生了明显的性能问题。
2.到了桥对面也很慢：对DOM的修改会触发渲染树的变化，导致【回流】和【重绘】

------------------------------------------------------

【优化一：减少DOM操作，少交过路费】
//1)优化前
for(var count=0;count<10000;count++){ 
  document.getElementById('container').innerHTML+='<span>我是一个小测试</span>'
} 
-----
//2)优化后（只获取一次container + 让JS给DOM分压）
let container = document.getElementById('container')
let content = ''
for(let count=0;count<10000;count++){ 
  // 先对内容进行操作
  content += '<span>我是一个小测试</span>'
} 
// 内容处理好了,最后再触发DOM的更改
container.innerHTML = content;
------
//3)用DOM Fragment实现2
-DOM Fragment 对象允许我们像操作真实 DOM 一样去调用各种各样的 DOM API
-它只是一个容器，当我们试图将其 append 进真实 DOM 时，它会在交出自身缓存的所有后代节点后全身而退
代码如下：
let container = document.getElementById('container')
// 创建一个DOM Fragment对象作为容器
let content = document.createDocumentFragment()
for(let count=0;count<10000;count++){
  // span此时可以通过DOM API去创建
  let oSpan = document.createElement("span")
  oSpan.innerHTML = '我是一个小测试'
  // 像操作真实DOM一样操作DOM Fragment对象
  content.appendChild(oSpan)
}
// 内容处理好了,最后再触发真实DOM的更改
container.appendChild(content)

-------------------------------------------------------

【回流和重绘】
回流：当我们对DOM的修改引发了DOM几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，
      浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。
      1) 最贵：改变DOM元素的几何属性（width、height、padding、margin、left、top、border 等等）
      2) 适中：改变DOM树的结构（即节点的增删、移动，当前元素不会再影响其前面已经遍历过的元素）
      3) 容易忽略：获取一些需要通过即时计算得到的属性值（offsetXXX、scrollXXX、clientXXX、getComputedStyle方法、IE的currentStyle）
重绘：当我们对DOM的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，
      浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了上图所示的回流环节）。
//重绘不一定导致回流，回流一定会导致重绘。（回流比重绘的开销更大）

【优化二：规避回流和重绘】
-使用class替代style，减少style的使用
--避免逐条改变样式，使用类名去合并样式。（container.classList.add('某样式表的名称');）
-使用resize、scroll时进行防抖和节流处理，这两者会直接导致回流
-使用visibility替换display: none，因为前者只会引起重绘，后者会引发回流
-批量修改元素时，可以先让元素脱离文档流（display: none），等修改完毕后，再放入文档流（display: block）
-我们在获取offsetWidth这类属性的值时，可以使用变量将查询结果存起来，避免多次查询，每次对offset/scroll/client等属性进行查询时都会触发回流）
-复杂的动画效果会频繁地触发回流重绘，将动画元素设置绝对绝对定位让其脱离文档流

【GPU加速】
优点：使用transform、opacity、filters等属性时，会直接在GPU中完成处理，这些属性的变化不会引起回流重绘。
缺点：GPU渲染字体会导致字体模糊，过多的GPU处理会导致内存问题。

---------------------------------------------------------

【Chrome浏览器自身的优化——Flush队列】
Chrome浏览器自己缓存了一个flush队列，把我们触发的回流与重绘任务都塞进去。
待到队列里的任务多起来、或者达到了一定的时间间隔，或者“不得已”的时候，再将这些任务一口气出队。
//不得已的时候：即获取特殊属性值时





