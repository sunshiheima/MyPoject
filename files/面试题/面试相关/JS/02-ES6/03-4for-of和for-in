【ES6的for-of循环】和【ES5的for-in循环】的区别：

for-of:
只能用在可迭代对象(即含有iterator接口的数据结构)上,获取的是迭代器返回的value值（所以是值！）。
只遍历当前对象，而不会遍历它的原型链
对于数组的遍历，for-of只返回数组的下标对应的属性值（即数组每个元素值）

for-in:
可用于所有对象。会遍历对象的整个原型链，获取所有可枚举属性的键名（是键名！）。      //遍历性能非常差不推荐使用
对于数组的遍历,for-in会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)

for-of循环原理：
其实也是利用了可迭代对象内部部署的iterator接口。
//将for-of循环分解成最原始的for循环
let arr = [1,2,3,4,5];
let iterator = arr[Symbol.iterator]();
//写法一
var res = iterator.next();
while(!res.done){
    console.log(res.value);
    res = iterator.next();
}
//写法二
for(let value, res; (res = iterator.next()) && !res.done;){
    value = res.value;
}

for-of循环同时支持break/continue/return（在函数中调用的话），并且可以和对象解构赋值一起使用
let arr = [{a: 1}, {b: 2}, {c:3}];
let obj = {};
//可以将下面obj.a看作一个整体xxx，方面理解
for({a: obj.a} of arr){
    obj.a       //1 => 2 => 3
}