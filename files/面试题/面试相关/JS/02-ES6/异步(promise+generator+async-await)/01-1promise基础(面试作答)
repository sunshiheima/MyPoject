
---------------1.Promise的常用API---------------

1.Promise.resolve(value) - 类方法
该方法接收一个参数value，返回将value值解析后的Promise对象
-如果传入的value是个thenable对象(简单理解为带有then方法的对象)，返回的Promise对象会“跟随”这个thenabl的对象，采用它的最终状态(指resolve/rejected/pending/settled)
 (thenable非常类似于Promise，但是并不是只要实现了then方法就一定能作为Promise对象来使用)
-如果传入的value是个Promise对象，则value作为Promise.resolve方法的返回值返回
-其他情况以该值为成功状态返回一个Promise对象

2.Promise.reject - 类方法
类方法，与resolve唯一的不同是，返回的promise对象的状态为rejected

3.Promise.prototype.then - 实例方法
用于为Promise注册回调函数，then方法接收一个函数作为参数。该函数参数又接收一个value作为参数。(即该函数的形式：fn(value){})
此value就是上一个任务返回的结果，then中的函数一定要return一个结果或者一个新的Promise对象，才可以让之后的then回调接收。

4.Promise.prototype.catch - 实例方法
用于捕获异常，和then方法类 似，接受一个函数作为参数。该函数参数又接收一个参数err(即函数形式：fn(err){})
此err是catch注册之前的回调当中抛出的异常信息。

5.Promise.race - 类方法
功能是：多个Promise任务同时执行时，返回最先执行结束的Promise任务的结果，不管这个Promise结果是成功还是失败。

6.Promise.all - 类方法
功能是：多个Promise任务同时执行时，如果全部成功执行，则以数组的方式返回所有Promise任务的执行结果；如果有一个Promise任务rejected，则只返回该Promise任务的结果


-------------promise需要注意的地方-------------

1.如果我们后续的任务是异步任务的话，必须return一个新的promise对象；如果后续任务是同步任务，只需return一个结果即可
  另：promise的then方法中的回调函数也可以不显性的返回值（这不意味着函数没有返回值，所有函数都会默认返回undefined）

2.一个Promise对象有三个状态，并且状态一旦改变，便不能再被更改为其他状态
pending                     异步任务正在进行
resolved(也可以叫fulfilled)  异步任务执行成功
rejected                    异步任务执行失败


---------------promise与事件循环--------------

Promise在初始化时，传入的函数是同步执行的，然后注册then回调。
注册完之后，继续往下执行同步代码，在这之前，then中回调不会执行。
只有同步代码块执行完毕后，才会在事件循环中检测是否有可用的promise回调。如果有，那么执行；如果没有，继续下一个事件循环。

关于Promise在事件循环中还有一个微任务的概念(micromask)


-------------promise的一般用法------------

1.首先初始化一个Promise对象，可以通过两种方式创建(这两种方式都会返回一个Promise对象)
-new Promise(fn)
-Promise.resolve(fn)

2.然后调用上一步返回的promise对象的then方法，注册回调函数
传给then方法的回调函数可以有一个参数，也可以不带参数。如果then中的回调函数依赖上一步的返回结果，那么要带上参数。
new Promise(fn)
.then(fn1(value){
    //处理value
})

3.最后注册catch异常处理函数，处理前面回调中可能抛出的异常
new Promise(fn)
.then(fn1(value){
    //处理value
})
.catch((err) => {
    console.log(err);
})






