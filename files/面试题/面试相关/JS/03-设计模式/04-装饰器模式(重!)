

关键字：
1.只添加(将原组件传入装饰器中，使装饰器对其进行装饰-修改/添加)；不修改(不直接修改原组件的代码)
2.ES7有现成的装饰器语法糖，使装饰器用起来更加方便
  当我们使用了ES7的装饰器语法糖之后，会将被装饰者作为参数传给装饰器，并且调用装饰器（实则为一个函数）
  //下面为装饰器函数
  function funcDecorator(target, name, descriptor){
    //装饰(或改变) 被装饰者的某方法
  }
  -target: 被装饰者
  -name: 我们将要修饰的目标属性的属性名
  -descriptor: 用于改变目标方法。
3.当我们需要用到某个反复出现的拓展逻辑时，比起自己闷头搞，不如去看一看团队（社区）里有没有现成的实现
  如果有，那么贯彻“拿来主义”，直接@就可以了
  (所以说装饰器模式是个好同志，它可以帮我们省掉大量复制粘贴的时间)
4.装饰器模式应用
  -【React高阶组件HOC】
  -【改变redux的connect方法的使用方式】
5.非常赞的装饰模式库 —— core-decorators帮我们实现好了一些使用频率较高的装饰器
  比如@readonly(使目标属性只读)、@deprecate(在控制台输出警告，提示用户某个指定的方法已被废除)
  推荐将core-decorators作为源码阅读材料

-------------------------------------------下面为阅读笔记（推荐看）----------------------------------------------

【装饰器模式】
为了不被已有的业务逻辑干扰，将旧逻辑和新逻辑分离。
装饰器模式：即将新逻辑添加到旧逻辑上，而非直接修改旧逻辑

1.装饰器模式初相见
即将之前的【点击按钮-出现弹框】问题，变更或添加需求（改变按钮文字、改变按钮颜色。。。）
-将旧逻辑保持不变，作为一个单独的函数openModal()
-创建另一个新的函数changeButtonStatus()，在其中编写新逻辑（包含变更按钮样式的代码）
-监听open的click事件，触发时执行openModal()和changeButtonStatus()
//这样就做到了“只添加，不修改” —— 遵循【开放封闭原则】

上面是用函数写的，现在用面向对象化的方式去写
-将旧逻辑保持不变，封装在一个类OpenButton
-创建另一个类中Decorator，在其中：
 -编写新逻辑changeButtonStatus（包含变更按钮样式的代码）
 -并且在这个类的constructor当中，将按钮实例传入（既new OpenButton()得到的按钮实例）    //重!(类似于下面【将被装饰者传入装饰器函数当中】)
 -并且添加了一个onClick方法，只有当Decorator调用此方法时，open_modal和changeButtonStatus才会执行
-实例化OpenButton，得到实例openButton。实例化Decorator的时候传入openButton。
-监听open的click事件，触发时执行decorator的onClick方法（也就是相当于执行openModal()和changeButtonStatus()）

//在示例代码中，会发现把做某一件事的代码都单独封装在一个函数里面
单一职责原则：
在日常开发中，当遇到两段各司其职的代码逻辑时，我们首先要有“尝试拆分”的敏感，其次要有“该不该拆”的判断。
当逻辑粒度过小时，盲目拆分会导致你的项目里存在过多零碎的小方法，这反而不会使我们的代码变得更好。

---------------------------------------------------------------------------------------------------------

2.深入装饰器模式（ES7的装饰器语法糖）
当我们使用了ES7的装饰器语法糖之后，会将被装饰者作为参数传给装饰器，并且调用装饰器（实则为一个函数）


【@装饰器名称】这一行写的位置直接决定了被装饰这是谁:
-类装饰器，写在类的上一行
-方法装饰器，写在类的里面（目标方法的上面？）

装饰者函数：
function funcDecorator(target, name, descriptor){
    //装饰(或改变) 被装饰者的某方法
}
-target: 被装饰者
-name: 我们将要修饰的目标属性的属性名
-descriptor: 用于改变目标方法。类似于Object.defineProperty(obj, prop, descriptor)当中的descriptor
             可通过descriptor.value来获取该目标方法

被装饰者:
class xxx {
    //下面等价于onClick: function(){...}
    onClick(){
        ...
    }
}

//故target为类xxx，name为onClick，descriptor为function(){...}
//其中target无需我们指定，会根据【@装饰器】写的位置判断出target，并将其自动作为参数传给装饰器函数
//我们写的重点应该是descriptor

-----------------------------------------------------------------------------------------------

3.装饰器模式应用 —— React高阶组件HOC
通过编写高阶组件，我们可以充分复用现有逻辑，提高编码效率和代码的健壮性。

//1)BorderHOC.js
import React, { Component } from 'react'
const BorderHoc = WrappedComponent => class extends Component {
  render() {
    return <div style={{ border: 'solid 1px red' }}>
      <WrappedComponent />
    </div>
  }
}
export default borderHoc

//2)TargetComponent.js
import React, { Component } from 'react'
import BorderHoc from './BorderHoc'
// 用BorderHoc装饰目标组件
@BorderHoc 
class TargetComponent extends React.Component {
  render() {
    // 目标组件具体的业务逻辑
  }
}
// export出去的其实是一个被包裹后的组件
export default TargetComponent

-----------------------------------------------------------------------------------

4.装饰者模式应用 —— 使用 ES7装饰者语法糖 改写 之前的redux/connect写法

//之前的写法

//App.js
class App extends Component {
  render() {
    // App的业务逻辑
  }
}
function mapStateToProps(state) {
  return ...
}

function mapDispatchToProps(dispatch) {
  return ...
}
// 把App组件与Redux绑在一起
export default connect(mapStateToProps, mapDispatchToProps)(App)

---------------

//现在的写法

//1)connect.js
function mapStateToProps(state) {
  return ...
}
function mapDispatchToProps(dispatch) {
  return ...
}
export default connect(mapStateToProps, mapDispatchToProps)

//2)App.js
import connect from './connect.js'   
//用connect装饰目标组件App
@connect
export default class App extends Component {
  render() {
    // App的业务逻辑
  }
}

------------------------------------------------------------------

补充说明：
1.既然用到了ES7的语法，那么直接运行就会报错，应该先用babel编译（具体使用见文）
2.当我们需要用到某个反复出现的拓展逻辑时，比起自己闷头搞，不如去看一看团队（社区）里有没有现成的实现
  如果有，那么贯彻“拿来主义”，直接@就可以了
  (所以说装饰器模式是个好同志，它可以帮我们省掉大量复制粘贴的时间)
3.非常赞的装饰模式库 —— core-decorators

