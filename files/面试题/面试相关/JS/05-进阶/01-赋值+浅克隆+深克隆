将引用类型赋给一个变量：
赋的其实是内存中的地址，而非堆中的数据。
故无论改变哪一个，其实都是指向同一块地址的，故引用类型和变量是联动的，其中一个修改就会影响到另一个。

无论是浅拷贝还是深拷贝，新对象都拥有和原对象相同的属性

---------------------------------------------------

浅拷贝：
-当属性值是基本类型时，拷贝的是基本数据类型的值
-当属性值是引用类型时，拷贝的是引用类型的内存地址
故当我们改变新对象的基本类型属性时，不会影响到原对象
当我们改变新对象的引用类型属性时，因为实则指向的是同一块内存，所以会影响到原对象

常见的浅拷贝实现：
-Object.assign()
-拓展运算符
-lodash库的clone()方法
-Array.prototype.slice()
-Array.prototype.concat()

---------------------------------------------------

深拷贝：
会彻底的将原对象从内存中拷贝一份，并且在堆内存中开辟一块存放该新对象
修改新对象，不会影响到原对象

常见的深拷贝实现：
-JSON.parse(JSON.stringfy(xxx));
 但是只能实现普通对象和数组的深拷贝，对于一些特殊对象例如函数和正则是无效的
-lodash库的cloneDeep()方法
-JQ的extends()方法
-自己手写深拷贝：递归，直到为基本数据类型的值时再赋值

