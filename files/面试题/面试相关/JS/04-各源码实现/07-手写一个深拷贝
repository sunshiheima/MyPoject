无论是浅拷贝还是深拷贝，新对象都拥有和原对象相同的属性

浅拷贝：
-当属性值是基本类型时，拷贝的是基本数据类型的值
-当属性值是引用类型时，拷贝的是引用类型的内存地址
故当我们改变新对象的基本类型属性时，不会影响到原对象
当我们改变新对象的引用类型属性时，因为实则指向的是同一块内存，所以会影响到原对象

深拷贝：
会彻底的将原对象从内存中拷贝一份，并且在堆内存中开辟一块存放该新对象
修改新对象，不会影响到原对象

//深拷贝核心逻辑（只实现了对普通对象和数组的深拷贝）
-调用深拷贝方法，若属性为值类型，则直接返回；若属性为引用类型，则递归遍历。
function deepClone(obj) {
    // 如果是 值类型 或 null，则直接return
    if(typeof obj !== 'object' || obj === null) {
        return obj
    }
    
    // 定义结果对象
    let copy = {}
    
    // 如果对象是数组，则定义结果数组
    if(obj.constructor === Array) {
        copy = []
    }
    
    // 遍历对象的key
    for(let key in obj) {
        // 如果key是对象的自有属性
        if(obj.hasOwnProperty(key)) {
            // 递归调用深拷贝方法
            copy[key] = deepClone(obj[key])
        }
    }
    
    return copy
} 

//简单版深拷贝，只实现了对数组、普通对象、函数的深拷贝
function deepCopy(obj){
  var type = Object.prototype.toString.call(obj);
  switch (type){
    case '[object Array]':
      return copyArray(obj, type, copy);
    case '[object Object]':
      return copyObject(obj, type, copy);
    case '[object Function]';
      return copyFunction(obj, type, copy);
    default:
      return obj;
  }
}

function copyArray(arr, type, copy = []) {
  //需要查一个arr.entries()
  for (const [index, value] of arr.entries()) { 
    //递归调用deepCopy()
    copy[index] = deepCopy(value);
  }
  return copy;
}

function copyObject(obj, type, copy = {}) {
  //需要查一下Object.entries()方法
  for (const [key, value] of Object.entries(obj)) {
    //递归调用deepCopy()
    copy[key] = deepCopy(value);
  }
  return copy;
}

function copyFunction(func, type, copy = () => {}) {
  //需要查一下eval()方法
  const newFunc = eval(func.toString());
  newFunc.prototype = func.prototype
  return newFunc
}






---------------------------------------------------------------------------------

注意：要实现一个完美的深拷贝太复杂了，这里简单介绍一下吧，可以应用于大部分场景了

//判断类型函数
function getType(obj) {
  const str = Object.prototype.toString.call(obj);
  const map = {
    '[object Boolean]': 'boolean',
    '[object Number]': 'number',
    '[object String]': 'string',
    '[object Function]': 'function',
    '[object Array]': 'array',
    '[object Date]': 'date',
    '[object RegExp]': 'regExp',
    '[object Undefined]': 'undefined',
    '[object Null]': 'null',
    '[object Object]': 'object'
  };
  if (obj instanceof Element) {
    // 判断是否是dom元素，如div等
    return 'element';
  }
  return map[str];
}

//简单版深拷贝（递归的过程）
function deepCopy(ori) {
  const type = getType(ori);
  let copy;
  switch (type) {
    case 'array':
      return copyArray(ori, type, copy);
    case 'object':
      return copyObject(ori, type, copy);
    case 'function':
      return copyFunction(ori, type, copy);
    default:
      return ori;
  }
}

function copyArray(ori, type, copy = []) {
  for (const [index, value] of ori.entries()) {
    //递归调用deepCopy()
    copy[index] = deepCopy(value);
  }
  return copy;
}

function copyObject(ori, type, copy = {}) {
  for (const [key, value] of Object.entries(ori)) {
    //递归调用deepCopy()
    copy[key] = deepCopy(value);
  }
  return copy;
}

function copyFunction(ori, type, copy = () => {}) {
  const fun = eval(ori.toString());
  fun.prototype = ori.prototype
  return fun
}
