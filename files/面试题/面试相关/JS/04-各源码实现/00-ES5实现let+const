var、let和const的区别：
1.var声明的变量会挂到全局作用域上，而let和const不会；
2.var声明的变量会提升，而let和const不会；
3.let和const所在的大括号会变成块级作用域，变量只能在该作用域内使用，不能跨块使用
4.var声明的变量可以重复声明，而let和const不能；
5.let和const会形成临时死区，即变量不能在声明之前被使用。

----------------------------------------------------------------------------

【ES5实现let】

1.babel: 将变量变为添加下划线的私有变量
我们实现一个for循环，用let来声明其中的变量i。用babel转换之后会发现，在for循环内部(小括号和大括号内)的变量i前被添加了一个下划线，而for循环外部的i不变。
因而循环内部的变量i被变为私有变量_i，外界无法访问到它，模拟了let的块级作用域的效果。
for(let i=0; i<5; i++){
  console.log(i);
}
console.log(i);   //报错

for(var _i=0; _i<5; _i++){
  console.log(_i);
}
console.log(i);   //报错

2.var + 立即执行函数
(function(){
  for(var i=0; i<5; i++){
    console.log(i);
  }
})();
console.log(i);   //Uncaught ReferenceError: i is not defined

-----------------------------------------------------------------------------

【ES5实现const】

实现const的关键就是Object.defineProperty()这个API,该API接收三个参数：
obj:目标对象 ; prop:目标属性 ; descriptor: 为一个对象，包含着各种属性描述符，用于精确的控制属性行为

属性描述符有：
value、get、set：默认都为undefined
writable、enumerable、configurable：默认都为false
//writable: 为true时，目标属性的值(value)才能被赋值运算符改变
//enumerable: 为true时，目标属性才能在for-in循环或Object.keys()中被枚举
//configurable: 用于设置除value和configurable之外，其他特性是否可以被改变

function _const(prop, value){
  window.prop = value;
  //写法一：
  var descriptor = {
    configurable: false,
    enumerable: false,
    value,
    writable: false,
  }
  //写法二
  var descriptor = {
    configurable: false,
    enumerable: false,
    get: function(){
      return value
    },
    set: function(newValue){
      new TypeError("Assignment to constant variable")
    }
  }

  Object.defineProperty(window, prop, descriptor)
}
_const('obj', {a:1});
obj.b = 2;
obj = {};     //不会报错，window.obj也不会被修改


















//立即执行函数模拟let的块级作用域
(function(){
  for(var i = 0; i < 5; i ++){
    console.log(i)  // 0 1 2 3 4
  }
})();

console.log(i)      // Uncaught ReferenceError: i is not defined

//通过Object.defineProperty()设置变量不可修改，从而模拟const
function _const(key, value) {    
    const desc = {        
        value,        
        writable: false    
    }    
    Object.defineProperty(window, key, desc)
}
    
_const('obj', {a: 1})   //定义obj
obj.b = 2               //可以正常给obj的属性赋值
obj = {}                //无法赋值新对象

