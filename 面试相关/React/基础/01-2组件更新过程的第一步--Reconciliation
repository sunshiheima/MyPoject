组件的更新过程：
    React在更新阶段会对比原有地Virtual DOM和新生成地Virtual DOM找出两者不同之处，根据不同来修改DOM树，这样就只需做最小地改动。
    这就是调和(Reconciliation)
    如果要对比两个N个节点的树形结构的算法，时间复杂度是O(N3).React不可能采用这种算法。React实际采用的算法需要的时间复杂度只有O(N).

    ------------下重！-------------
    React首先会检查两个树形的根节点的类型是否相同，根据相同或者不同有不同处理方式！
    1.根节点类型不同：需要重新构建新的DOM树，原有的树形上的React组件会经历"卸载"和"装载"的生命周期，即componentWillUnmount->componentWillMount->render->componentDidMount
                     注意：因此，作为开发者，我们一定要避免作为包裹功能的节点类型被随意改变！
    2.根节点类型相同：只需要更新过程，不会将其卸载重装。
                     1)对于DOM元素类型：React会保留节点对应的DOM元素，只对树形结构根节点上的属性和内容做一下比对，然后只更新修改的部分。
                     2)对于React组件类型：React会根据新节点的props去更新原来根节点的组件实例，引发这个组件实例的更新过程。
                       即：componentWillReceiveProps->shouldComponentUpdate->componentWillUpdate->render->componentDidUpdate
                       在这个过程中，如果shouldComponentUpdate函数返回false的话，那么更新过程就此打住，不再继续。
                       因此必须重视shouldComponentUpdate！！！


    ------------另：了解即可----------
    算法思路是：
        当React要对比两个Virtual DOM的树形结构的时候，从根节点开始递归往下比对
       （在树形结构上，每个节点都可以看作一个这个节点以下部分子树的根节点，所以这个对比算法可以从Virtual DOM上任何一个节点开始执行）
