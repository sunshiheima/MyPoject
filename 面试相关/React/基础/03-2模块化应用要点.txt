模块化应用要点：

从架构出发，当我们开始一个新的应用的时候，有几件事情是一定要考虑清楚的：
1.代码文件的组织结构
  要按功能组织（即：与同一功能相关的文件都放在一起，而不是按角色组织）
2.确定模块的边界
  即每个功能下的index.js文件
  两种导出方式: export 和 export default
3.状态树(Store)的设计--需要我们动脑子的地方！
  状态树设计是程序逻辑的源头，因为其直接决定了: 要写哪些reducer && action怎么写
  设计的几个原则：
  1)一个状态节点只属于一个模块（即：一个状态节点的修改权只掌握在一个模块的手中，但是所有模块都可读取）
  2)避免冗余数据（即范式化，而反范式化：是利用数据冗余来减少读取数据库时的数据关联工作，从而提高读取性能）
    但是并不是说Redux应用不需要考虑性能，而是相对于性能问题，数据一致性的问题才更加重要
    我们可以利用reselector等工具获得高的读取性能
  3)树形结构扁平
    即数据不要嵌套过深！

----------------------------------------------------------------------------------------
Todo应用实例：

1&2.按功能组织代码文件 && 确定模块的边界
  todos/
    index.js
  filter/
    index.js

3.Todo状态设计
  todos: 1)确定存储数据的数据结构 —— 数组
         2)确定每条数据的数据结构 —— 对象 ；及需包含的字段 —— id, text, completed
           {
             id: //唯一标示
             text: //待办事项内容
             completed: //布尔值，标示代办事项是否已经完成
           }
  filter:3)确定过滤器(filter)的可选值 —— all, completed, uncompleted
           对应的常量就是 —— ALL, COMPLETED, UNCOMPLETED

  --------
  综合上面，Todo应用的状态树大概是这样的：
  {
    todos: [        //1)每当增加一个待办事项，就在数组类型的todos中增加一个元素
      {
        id: 0,
        text: 'First todo',
        completed: false
      },
      {
        id: 1,
        text: 'Second todo',
        completed: false
      }
    ],
    filter: 'all'   //2)当要标记一个待办事项为“已完成”或“未完成”，就更新对应待办事项的completed字段值
  }
  //3)可见，哪些待办事项应该显示出来，则要根据todos和filter共同决定

4.确定提供的(可发生的)行为actionTypes
  添加待办项TODO_ADD、删除待办项TODO_REMOVE、反转待办项TODO_TOGGLE


--------------------------------------------------------------------------------------------




