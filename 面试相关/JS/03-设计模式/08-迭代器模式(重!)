迭代器模式：
    提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。

迭代器模式目的性极强，就解决一个问题 —— 遍历

---------------------------------------------------------

ES6之前的迭代器模式（Array.prototype.forEach）
const arr = [1, 2, 3]
arr.forEach((item, index)=>{
    console.log(`索引为${index}的元素是${item}`)
})

//但是Array.prototype.forEach只能用于遍历数组，遍历类数组或对象都会报错。因此我们需要一个更强的通用迭代器。
通用迭代器：使我们在访问集合内每一个成员时不用去关心集合本身的内部结构以及集合与集合间的差异，
JQ的each方法就是一个通用的迭代器！

---------------------------------------------------------

ES6使JS内置了通用迭代器！(Iterator)
可以遍历Array、TypedArray(函数的arguments对象、NodeList对象)、Map、Set、String

ES6约定，任何数据结构只要具备Symbol.iterator属性（这个属性就是Iterator的具体实现，它本质上是当前数据结构默认的迭代器生成函数），就可以被遍历

遍历方式有两种：

//1.调用该种数据结构默认的迭代器，并不断调用next()实现逐个访问数组成员；
const arr = [1, 2, 3]
// 通过调用iterator，拿到迭代器对象
const iterator = arr[Symbol.iterator]()
// 对迭代器对象执行next，就能逐个访问集合的成员
iterator.next()
iterator.next()
iterator.next()

//2.使用for-of遍历
const arr = [1, 2, 3]
const len = arr.length
for(item of arr) {
    console.log(`当前元素是${item}`)
}

for-of其实就是iterator循环换了种写法而已
// 通过调用iterator，拿到迭代器对象
const iterator = arr[Symbol.iterator]()
// 初始化一个迭代结果
let now = { done: false }
// 循环往外迭代成员
while(!now.done) {
    now = iterator.next()
    if(!now.done) {
        console.log(`当前元素是${now.value}`)
    }
}

--------------------------------------------------------------------

【ES6实现一个迭代器】（使用Generator）
Generator: 【迭代器对象Iterator】就是由【迭代器生成函数Generator】帮我们生成的！

// 编写一个迭代器生成函数
function *iteratorGenerator() {
    yield '1号选手'
    yield '2号选手'
    yield '3号选手'
}
const iterator = iteratorGenerator()
iterator.next()
iterator.next()
iterator.next()

----------------------------------------------------------------------

【ES5实现一个迭代器】（原理其实很简单！就是一个next()方法而已！next()也就是管理了done状态和value值而已!）

//自己默写的代码
const iteratorGenerator = function (list) {
  let len = list.length;
  let index = 0;
  return {
    next: function () {
      let done = index >= len;
      let value = !done ? list[index++] : undefined;
      return {
        value,
        done,
      };
    },
  };
};
let arr = [1, 2, 3];
let iterator = iteratorGenerator(arr);
iterator.next();


// 定义生成器函数，入参是任意集合
function iteratorGenerator(list) {
    // idx记录当前访问的索引
    var idx = 0
    // len记录传入集合的长度
    var len = list.length
    return {
        // 自定义next方法
        next: function() {
            // 如果索引还没有超出集合长度，done为false
            var done = idx >= len
            // 如果done为false，则可以继续取值
            var value = !done ? list[idx++] : undefined
            // 将当前值与遍历是否完毕（done）返回
            return {
                done: done,
                value: value
            }
        }
    }
}
var iterator = iteratorGenerator(['1号选手', '2号选手', '3号选手'])
iterator.next()
iterator.next()
iterator.next()