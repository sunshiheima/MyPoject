/*
bind和call/apply：本质都是改变this的指向
不同点是：bind是返回一个新的函数，而call/apply是直接调用函数（call跟apply就只有参数上的不同）

bind实现注意：
  函数作为构造函数用new关键字调用时，不应该改变其this指向，因为【new绑定】的优先级高于【显式绑定】和【硬绑定】
  从源码中可以发现，bind实则是用apply实现的
*/

Function.prototype.mybind = function(thisArg){
  //this为func1
  if(typeof this !== "function"){
    throw TypeError("Bind must be called on a function!");
  }
  //取出调用bind时传的其他参数
  const args = Array.prototype.slice.call(arguments, 1);
  //保存原型
  let nop = function(){};
  if(this.prototype){
    nop.prototype = this.prototype;
  }
  //定义bound
  let self = this;
  let bound = function(){
    self.apply(
      this instanceof nop ? this : thisArg,
      args.concat(Array.prototype.slice.call(arguments))
    )
  }
  //修正原型
  bound.prototype = new nop();
  return bound;
}
//测试mybind
const func1 = function () {
  console.log(this.name, arguments);
};
func1.prototype.name = "func1原型上的name属性";
const obj = {
  name: "obj对象中的name属性",
};
const bound = func1.mybind(obj, 1, 2, 3);
new bound(5, 6); //func1原型上的name属性，Arguments[1,2,3,4,5]
bound(5, 6); //obj对象中的name属性，Arguments[1,2,3,4,5]

------------------------------------------------代码详细注释-------------------------------------------------------------

//func1.bind(obj, 1, 2, 3) //所以mybind内部的this原本是指向fun1的；现在我们的目的是将fun1内部的this指向obj
Function.prototype.mybind = function (thisArg) {
  //this为func1
  if (typeof this !== "function") {
    throw TypeError("Bind must be called on a function!");
  }
  //取出调用bind时传的其他参数
  const args = Array.prototype.slice.call(arguments, 1);
  //保存原型
  let nop = function () {};
  if (this.prototype) {
    nop.prototype = this.prototype;
  }
  //定义bound
  let self = this;
  //bound为一个函数，若用new调用，则bound为一个构造函数
  let bound = function () {
    //new调用则为func1.apply(实例, ...)，即实例对象.func1(...)。那么func1内部的this指向实例对象。并且会先去实例对象上去找有无func1方法(肯定无，因为bound构造函数内部并无this.func1 = xxx)，若无则沿着原型链(bound.prototype)向上查找。
    //普通调用则为func1.apply(obj, ...)，即obj.func1(...)。那么func1内部的this指向obj。并且直接去obj对象上寻找func1方法并执行。
    self.apply(
      this instanceof nop ? this : thisArg,
      args.concat(Array.prototype.slice.call(arguments))
    );
  };
  //修正原型（所以bound.prototype和nop.prototype直接联系起来了，故bound.prototype和func1.prototype直接联系起来了）
  //故最终的原型链是：bound实例 -> bound.prototype -> func1.prototype
  bound.prototype = new nop();  
  return bound;
};

//测试mybind
const func1 = function () {
  console.log(this.name, arguments);
};
func1.prototype.name = "func1原型上的name属性";
const obj = {
  name: "obj对象中的name属性",
};
const bound = func1.mybind(obj, 1, 2, 3);
new bound(5, 6); //func1原型上的name属性，Arguments[1,2,3,4,5]
bound(5, 6); //obj对象中的name属性，Arguments[1,2,3,4,5]


