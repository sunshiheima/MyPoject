这篇文章是正则当中最易理解的文章了！很好条理很清晰，值得重看！
https://juejin.im/post/6844903648309297166#heading-17

1.基本语法：
字符：\d	\w  \W   \s  \S  .
数量：*    +    ?    {min,max}   {n}
位置：^   $    \b
字符在前，数量和位置紧跟在后

例如：\w    \w\w\w     \s\s

quantidiers例如：\w{5}   \w{5}\s  \w+  ^\w+   \w+$    \b\w{5}\b    \d{3}-\d{3}-\d{4}

2.字符分类
分类符[]表示逻辑关系“或”，例如：[abc]、[-.]、l[yi (]nk  ——  和字符的地位一样（数量和位置也是应该紧跟在后的）
()也可以表示"或"功能更强大，例如(a|b)表示a或b，(com|net|edu)表示三个当中的任意一个。
//可以看出，(a|b) === [ab]；但是(com|net|edu)却无法用[]得到相同效果的。

注意：
-在[]中，特殊字符不需要转义，可以直接使用，比如[.()]。但是在外面，是需要转义的比如\(   \.等。
-在[]中，-不是第一个字符时，比如[a-z]，这就表示字母a到字母z的任意一个字母
-在[]中，^不再表示一行的开头，它有着不同的含义。[ab]表示"a或者b"，[^ab]表示"只要不是a或者b"，相当于取反。

3.分组捕获（注意【有$x或者/x】的地方一定要【先有()】进行分组）
1）用()进行分组
     第一个分组(Group0): 即"整个正则  匹配到的  整个字符串"   
     第二个分组(Group1): 即"整个正则当中从左往右数第一个()包含的部分正则  匹配到的  部分字符串"
     第三个分组(Group2): 第二个()
2）用$选择已经匹配的分组（用于在替换的时候，进行的标志或选择）
     问：匹配markdown中的link标签，并替换为html标签。
           例(每个单独一行)：[google](http://google.com)	   [itp](http://itp.nyu.edu)    [Coding Rainbow](http://codingrainbow.com)
     答：//1.第一步求得reg
            //最初的reg(未去掉"."的贪婪，未添加捕获）	\[.*\]\(http.*\)
            //去掉"."的贪婪的reg			\[.*?\]\(http.*?\)
            //添加了捕获的reg			\[(.*?)\]\((http.*?)\)
            最终reg为 \[(.*?)\]\((http.*?)\)
            //2.第二步进行replace
            最终replace为 <a href="$2">$1</a>
     //注意
     "."是贪婪的，它表示所有，所有能匹配到的，当然也包括了]，一直到这一行的最后一个]，它才会停止。
     所以为了让它能正确匹配，需要去掉这种贪婪的属性。
     当?放在了quantifiers符号”.*“后，表示去掉贪婪属性，匹配到终止条件，即可停下！
3）使用\选择出已经匹配的分组（用于，在正则表达式本身）
     问：想要匹配比如is is so so这样连续的序列
     答：未处理字符结界的reg		(\w+)\s\1
            处理了字符结界的reg		\b(\w+)\s\1\b

4.在JS中的应用
1) reg.test()   只能测试：字符串中是否【包含】符合该正则表达式的字符，返回一个布尔值
2) str.match()  不是判断是否包含这么简略了。它会返回你所匹配到的内容，结果为一个数组。需要和flag结合使用。
                //所谓匹配：即【在字符串中】寻找【符合正则表达式的内容】
                -无标志，默认，那么结果数组当中只有“符合正则表达式的第一个内容”
                -g，表示全局匹配，那么结果数组当中有“符合正则表达式的所有内容”      //常用str.match(reg-含g标志)=> 找出字符串中符合正则表达式的所有内容，返回结果为一个数组
                -i，表示忽略大小写
                -m，表示多行匹配
  是否会返回分组：当reg使用了g的时候，不会返回分组，而是全部的匹配结果；如果没有使用g，则会将匹配到的结果和分组以数组的形式返回。
  //即str.match()无论如何都无法返回 全局所有的分组
3)reg.exec()    可以实现匹配全局，并返回所有分组
                reg.exec()每次调用，返回一个匹配的结果，匹配结果和分组以数组的形式返回，不断地调用即可返回下一个结果，直到返回null
                //代码为迭代循环（while）
4)str.split()   将字符串按照某个字符分隔开，var result = s.split(' ');    =>    var result = s.split(/\s/);   ==(增强)==>   var result = s.split(/[,\s]+/);
                //注意一个小point：【如果想要保留分隔符，只要给匹配地内容分组即可】
5)str.replace(reg, 替换的字符串|一个回调函数)  
                //第二个参数是“替换的字符串”
                例题：替换一个序列中的元音字母(aeiou)，将其替换成一个double。 比如x->xx
                答：var result = str.replace(/([aeiou])/g,"$1$1");      //不要忘记加g
                //第二个参数是“一个回调函数”
                这是最牛逼的用法，函数的参数是匹配到的内容，返回的是需要替换的内容。（具体见文）

最后有一个综合练习题，很不错！！！

5.总结：
-在js中，正则表达式字面量/reg/和字符串字面量"str"用于创建正则和字符串。
-正则上有两个方法reg.test()和reg.exec()
 //reg.test(str)：返回布尔变量，用于指示是否有所匹配；
 //reg.exec(str)：类似与迭代器，每次执行，返回匹配结果和分组，直到返回为null结束。
-字符串上有三个方法str.match(reg),str.split(reg)和str.replace(reg,str|function)
 //str.match(reg)：比较特殊，如果正则包含了分组，且没有g标志，则返回匹配内容和分组; 如果没有分组，且有g标志，返回所有匹配内容
 //str.split(reg)：主要用于字符串分割，如果想要保存分隔符，记得将匹配内容分组(用小括号包起来)
 //str/replace(reg)：是最强大的方法，当使用回掉函数时，返回值就是替换值; 参数分别为匹配值 group1 group2 ...







