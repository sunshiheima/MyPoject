执行上下文中讲到：当JS引擎 执行一段可执行代码时，会创建对应的执行上下文。

对于每个执行上下文，都有三个重要属性：
1.变量对象(Variable object, VO)
2.作用域链(Scope chain)
3.this

-------------------------------------------------------------
本节讲【创建变量对象】的过程
变量对象：是与执行上下文相关的数据作用域，存储了执行上下文定义的变量和函数声明
          执行上下文有两种：全局上下文 && 函数上下文

1.全局上下文：全局上下文的变量对象，其实就是全局对象即window对象
2.函数上下文：在函数上下文中，我们用活动对象(activation object, AO)来表示变量对象。
  注意：活动对象和变量对象其实是一个东西，只是变量对象是规范上的或者说是引擎实现上的，不可再JS环境中访问。
        只有到当进入到一个执行上下文中，这个执行上下文的变量对象才会被激活，所以才叫activation object
        而只有被激活的变量对象，也就是活动对象上的各种属性才能被访问。
        ---
        ？活动对象是在进入函数上下文时刻被创建的，它通过函数的arguments属性初始化。arguments属性值是Arguments对象。

----------------------------------------------------------------
执行过程：
执行上下文的代码会分成两个阶段进行处理：1.分析(进入执行上下文) 2.执行(代码执行)

1.分析(进入执行上下文,这时候还没有执行代码)
变量对象(VO为GO/AO)会包括：
1)函数的所有形参（当该执行上下文为函数上下文时--即AO中）
  由名称和对应值组成的一个变量对象的属性被创建
  没有实参，属性值设为undefined
2)函数声明
  由名称和对应值(函数对象)组成的一个变量对象的属性被创建
  如果变量对象已经存在相同名称的属性，则完全替换这个属性
3)变量声明
  由名称和对应值(undefined)组成的一个变量对象的属性被创建
  如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性。

注意：重复声明函数，后面会替换掉前面的；而重复声明的变量和【形参&已声明的函数】相同，后面不会替换掉前面的。

-----------------------------------------------------------
【变量对象的创建过程】总结：
1.全局上下文的变量对象(GO)初始化是全局对象(window对象)
2.函数上下文的变量对象(AO)初始化只包括Arguments对象
  在进入执行上下文时(分析阶段)会给变量对象添加形参、函数声明、变量声明等初始的属性值（值都为undefined?）
  在代码执行阶段，会再次修改变量对象的属性值

注意：在初始化执行上下文时，首先会处理函数声明，其次会处理变量声明，
      重复声明函数，后面会替换掉前面的
      ！如果变量名称跟【已经声明的形参或函数】相同，则变量声明不会干扰已经存在的这类属性。




