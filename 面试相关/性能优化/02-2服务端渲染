客户端渲染：
服务端会把渲染需要的静态文件发送给客户端，客户端加载过来之后，自己在浏览器里运行JS，生成相应的DOM。
这种特性使得客户端渲染的源代码总是特别简洁。（页面上呈现的内容，你在html源文件里里找不到）

服务端渲染(SSR):（知乎）
当用户第一次请求页面时，由服务器把需要的组件或页面渲染成 HTML 字符串，然后把它返回给客户端。
客户端拿到手的，是可以直接渲染然后呈现给用户的 HTML 内容，不需要为了生成 DOM 内容自己再去运行一遍JS代码。
页面上呈现的内容，我们在 html 源文件里也能找到。

服务端渲染解决了客户端渲染的两大问题:
-首屏加载慢
-对SEO不友好

-----------------------------------------------------

服务端渲染的灵魂操作：
一是这个 renderToString() 方法；二是把转化结果“塞”进模板里的这一步。
服务端渲染不再是早年 JSP 里简单粗暴的字符串拼接过程，它还要求这一端要具备将虚拟 DOM 转化为真实 DOM 的能力。
与其说是“把 JS 在服务器上先跑一遍”，不如说是“把 Vue、React 等框架代码先在 Node 上跑一遍”。

为什么服务端渲染的应用仍然不多？
服务端渲染本质上是本该浏览器做的事情，分担给服务器去做。
用户拥有的浏览器总量多到数不清，那么一个公司的服务器又有多少台呢？
我们把这么多台浏览器的渲染压力集中起来，分散给相比之下数量并不多的服务器，服务器肯定是承受不住的。
这样分析下来，服务端渲染也并非万全之策。

重要！
一般会建议大家忘记服务端渲染——服务器稀少而宝贵。
因为首屏渲染体验和SEO的优化方案有很多，尽量先用较低成本的方式。

