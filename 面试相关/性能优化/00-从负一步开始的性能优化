笔记为本篇博客的内容
http://hpoenixf.com/posts/19095/#more

//性能优化的时机，其实可以更早，比用户输入url更早，即用户将要访问你的页面这一步开始优化。
//因此可以将性能优化按时间顺序分为三块：页面访问前、页面加载中、页面运行时。

从用户输入url到页面渲染过程：【对应页面加载过程中】
-浏览器解析URL
-查询缓存
-DNS查询
-建立TCP连接
-浏览器发送HTTP请求
-服务器处理请求
-服务器返回HTTP响应
-客户端收到返回的资源
-解析HTML和CSS，构建渲染树 -> 开始显示内容(白屏时间)
-首屏内容加载完成(首屏时间)
-用户可交互(页面可交互DOMContentLoaded)
-加载完成(load)

------------------------------------------------------------------------------------------------

【用户访问网站前的性能优化】
1.推送资源
  -预先将页面资源如JS、图片、多媒体文件推送到客户端/浏览器
2.预加载
  -prefetch（可能使用的资源）
  -preload（必要资源）
  -prerender
3.提前打开webview容器
  -打开webview容器需要一些时间，可以提前打开该容器来省去打开时间
4.预先请求AJAX
  -提前获取下一个跳转页面 需要的AJAX数据，缓存到localstorage

--------------------------

【页面加载过程中的性能优化】
1.查询强缓存
  -service worker
  -强缓存
2.解析DNS
  -域名收敛
  -http dns
  -hns-prefetch: <link rel="dns-prefetch" href="/domain.com" >
  -使用CDN，将图片等资源的dns配置指向cdn，加速下载，抹平运营商差异
3.建立TCP连接
  -http2: 多路复用
  -keep-alive: 长连接
  -域名发散：突破并发请求限制
4.发送HTTP请求
  -打包代码(webpack)和图片优化(雪碧图合并小图片、使用base64免去小图片请求、选用合适的图片格式)
  -disk cache协商缓存
5.服务器处理请求
  -尽量减少重定向(301永久、302临时)
  -移动端访问PC页面需要跳转到移动端页面时，要在服务端使用302跳转，不要在前端进行跳转；
  -启用HSTS，要求浏览器在之后的访问使用https(307)，减少无谓的http跳转https，同时还可以防止SSL剥离攻击。
  -服务器发送响应时，可以使用Transfer-Encoding=chunked，多次返回相应（具体操作bigpipe）；减小cookie体积
6.服务器发送响应
  -gzip压缩资源
  -用更好的格式如webp
  -使用<script type=module>传输es6版本代码；使用<sciript nomodule>传输es5版本代码
7.构建渲染树
  -CSS优化（加载尽早和尽快、写法）
  -JS优化（延迟加载）
  -DOM优化（减少DOM的数量和嵌套层级、合并DOM操作、尽可能减少回流和重绘）
  -懒加载
8.白屏
  -骨架屏
  -服务器渲染
9.运行JS
  -依赖版本同一
  -精简代码
  -tree shaking
  -代码分割
10.获取渲染需要的接口
  -localStorage缓存时效性不强的数据
  -在用户打开页面的过程中就获取接口（需要客户端配合改造，可以使用url带参数或是配置文件）
11.首屏内容
  -placeholder
  -关键CSS和DOM
12.页面可交互DOMContentLoaded
13.加载完成load

-------------------------

【页面运行时的性能优化】
//使用raf记录fps可以记录帧率
1.构建合成层启用GPU加速
  -will change: opacity、transform、top right bottom left
  -transform: translateZ
  -position:fixed
  -zIndex
2.减少重绘和重排
  -避免频繁操作样式和DOM
  -避免读取offsettop、scrolltop、clienttop等属性，避免使用getComputedStyle()和currentStyle()方法
  -class代替style
  -将[批量修改的元素、复杂动画]脱离文档流
3.虚拟滚动条应对无限加载
4.节流防抖
5.虚拟DOM
6.用raf来做动画
7.滚动优化
  -节点回收
  -占位
  -事件节流、事件代理
8.对性能较差的机型降级：(怎么判断)
  -使用canvas嗅探GPU型号：关键词包括experimental-webgl、WEBGL_debug_renderer_info、info.UNMASKED_RENDERER_WEBGL
  -Native API手机机型识别
  -UA 获取系统版本
  -分辨率
