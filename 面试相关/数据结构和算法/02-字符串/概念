字符串在算法面试中，单独考察的机会并不多，同样倾向于和一些经典算法结合来体现区分度。
在讲题之前，首先点拨两个字符串相关的“基本算法技能”，偶尔会单独命题，但整体来看在综合题中的考察效率较高，需要大家着重熟悉、反复和记忆！

基本算法技能
1.反转字符串（直接调相关API即可）
2.判断一个字符串是否是回文字符串（两种方法都要记住！）

高频真题解读
1.回文字符串的衍生问题
字符串题干中若有“回文”关键字，那么做题时脑海中一定要冒出两个关键字 —— 对称性和双指针
这两个工具一起上，足以解决大部分的回文字符串衍生问题
2.字符串匹配问题 —— 正则表达式初相见(test()方法)
3.将字符串转化为数字(match()方法)

-------------------------------------------------------正则（很重要！）具体见文！讲的很好！--------------------------------------------

23提到【正则表达式】！
当看到题目中有很多字符串约束条件时，就要考虑用正则来做了。
对于正则表达式，大多数的团队不会有特别强硬的要求，不会期望你一定要多么多么精通、能不靠Google徒手写多么复杂的表达式出来啥的——这样搞其实也没意义
但是必要的基础是要有的，【将字符串转化为数字】那道题涉及的正则其实就在这个“必要”的范围里。
1.把字符串开头的空格都摘出去
  -trim() —— 但本题不用
  -自己手写空格匹配（正则匹配符为\s*，意味着匹配0或多个空格）
   但是不把它放在捕获组里 —— 这种方法会更加通用，正则表达式匹配中，所有的“摘除”动作都可以通过将匹配到的结果排除在捕获组之外来实现。
2.字符串的第一个有效字符为"+"或"-"时，不要摘它出去
3.匹配的时候，连续整数之外的部分都应该被摘除


正则表达式的使用：
JS的正则相关方法中，test()方法返回的是一个布尔值，单纯判断"是否匹配"。要想获取匹配的结果，我们需要调度match()方法。
//1.test()方法——单纯判断是否匹配
创建正则表达式：const reg = new RegExp(word)  //例如word为.ad
测试某个字符串是否与正则表达式相匹配，需要test方法：reg.test(item)  //item表示某个具体的单词，例如bad

//2.match()方法——可以让我们获取匹配的结果
创建正则表达式：const reg = /\s*([-\+]?[0-9]*).*/
获取匹配结果,需要调度match方法：const groups = str.match(reg)

match方法：
    （是一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回null）
    如果我们的正则表达式尾部有g标志，match()会返回与完整正则表达式匹配的所有结果，但不会返回捕获组
    如果没有使用g标志，match()就会返回第一个完整匹配（作为数组的第0项目),及其相关的捕获组(作为数组的第1及第1+项)
    



